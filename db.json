{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1490345568000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1490345568000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1490345568000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1490345568000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1490345568000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1490345568000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1490345568000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1490345568000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1490345568000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1490345568000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1490345568000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1490345568000},{"_id":"themes/next/_config.yml","hash":"3b166faf0b65e4b7410f7133945516e7e8aab2ed","modified":1490345568000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1490345568000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1490345568000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1490345568000},{"_id":"source/_posts/《结构思考力》读书笔记.md","hash":"f4fbf6f41d63da492cbdf44677820abd5a4b9682","modified":1487766582000},{"_id":"source/_posts/使用autohotkey修改方向键、回车和启动程序.md","hash":"8f951c1c9a96336908d5d5b18a41cf3f96160208","modified":1491556446000},{"_id":"source/_posts/从三个区域理解git命令（基础篇）.md","hash":"a31ff983a1f6ead8ad8c6d256c79570210257e01","modified":1489996498000},{"_id":"source/_posts/一个关于闭包、回调函数和异步程序的例子.md","hash":"69b9c7b1447b7b0c1c9cd14644b0c55b57b26c33","modified":1490433008000},{"_id":"source/_posts/初学git的一些基础知识.md","hash":"af0207fc01dc2581c38b5f138b33372102a8d7e7","modified":1487746986000},{"_id":"source/_posts/如何在网络公共场合发帖提问.md","hash":"2e899d51f43aa75a1db3ff4922ad7d282537221d","modified":1488170652000},{"_id":"source/_posts/对angularJS一些概念的理解.md","hash":"9c06a00793bbb70e14ed71c66f7d7c97ee89f5da","modified":1487766664000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1490345568000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1490345568000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1490345568000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1490345568000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1490345568000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1490345568000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1490345568000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1490345568000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1490345568000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1490345568000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1490345568000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1490345568000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1490345568000},{"_id":"themes/next/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1490345568000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1490345568000},{"_id":"themes/next/layout/_layout.swig","hash":"909d68b164227fe7601d82e2303bf574eb754172","modified":1490345568000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1490345568000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1490345568000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1490345568000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1490345568000},{"_id":"themes/next/layout/schedule.swig","hash":"234dc8c3b9e276e7811c69011efd5d560519ef19","modified":1490345568000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1490345568000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1490345568000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1490345568000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1490345568000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1490345568000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1490345568000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1490345568000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490345568000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1490345568000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1490345568000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1490345568000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1490345568000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1490345568000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1490345568000},{"_id":"themes/next/layout/_macro/post.swig","hash":"640b431eccbbd27f10c6781f33db5ea9a6e064de","modified":1490345568000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1490345568000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1490345568000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1490345568000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1490345568000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1490345568000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1490345568000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1490345568000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1490345568000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1490345568000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1490345568000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9de352a32865869e7ed6863db271c46db5853e5a","modified":1490345568000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1490345568000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1490345568000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1490345568000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1490345568000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1490345568000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1490345568000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1490345568000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1490345568000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1490345568000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1490345568000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1490345568000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1490345568000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1490345568000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1490345568000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1490345568000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1490345568000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1490345568000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1490345568000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1490345568000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1490345568000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490345568000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490345568000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1490345568000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1490345568000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1490345568000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490345568000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490345568000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490345568000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490345568000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490345568000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490345568000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490345568000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1490345568000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1490345568000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1490345568000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1490345568000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1490345568000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1490345568000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1490345568000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1490345568000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1490345568000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1490345568000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1490345568000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1490345568000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1490345568000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1490345568000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1490345568000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1490345568000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1490345568000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1490345568000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1490345568000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1490345568000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1490345568000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1490345568000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1490345568000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1490345568000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1490345568000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1490345568000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1490345568000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1490345568000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1490345568000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1490345568000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1490345568000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1490345568000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1490345568000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1490345568000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1490345568000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1490345568000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1490345568000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1490345568000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1490345568000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1490345568000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1490345568000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1490345568000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1490345568000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1490345568000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1490345568000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1490345568000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1490345568000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1490345568000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1490345568000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1490345568000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1490345568000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1490345568000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1490345568000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1490345568000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1490345568000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1490345568000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1490345568000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1490345568000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1490345568000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1490345568000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1490345568000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1490345568000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1490345568000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1490345568000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1490345568000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1490345568000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1490345568000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1490345568000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1490345568000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1490345568000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1490345568000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1490345568000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1490345568000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1490345568000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1490345568000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1490345568000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"1eb34b9c1f6d541605ff23333eeb133e1c4daf17","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1490345568000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1490345568000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1490345568000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1490345568000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1490345568000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1490345568000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1490345568000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1490345568000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490345568000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1490345568000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1490345568000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1490345568000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1490345568000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"《结构思考力》读书笔记","_content":"\n# 结构化思考\n结构可以说是万物之本，大到宇宙星系、小到颗粒尘埃都有其特定的结构。我们很难想象没有结构的世界是什么样子的。在物质世界，人们通过结构来认识物质；在思维世界，人们也同样通过结构来认识事物、认识其中的规律和美。结构存在于每个整体与局部关系的无穷变化中，每个局部表现整体，而局部的意义又由整体来决定。因此，当我们面临一个问题时，如果可以从结构的视角去审视和思考，一定可以让我们看得更全面、更清晰。\n\n结构思考力是所有人都需要具备的核心技能。罗伯特卡茨在1955年发表过一篇《高效管理者的三大技能》的文章。他认为，高效的管理者应当具备三种基本技能：技术性技能、人际性技能和概念性技能。\n![](http://o7w6l6vti.bkt.clouddn.com/%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E8%80%85%E7%9A%84%E4%B8%89%E5%A4%A7%E6%8A%80%E8%83%BD.png)\n\n概念性技能就是指对复杂情况进行抽象和概念化的技能。而结构化思考的能力就是概念性技能中最关键的技能。它是一种“先总后分”的思考与表达方式，强调先框架后细节，现总结后具体，先结论后原因，先重复后次要。它分为三大阶段五个步骤。\n![](http://o7w6l6vti.bkt.clouddn.com/%E4%B8%89%E5%A4%A7%E9%98%B6%E6%AE%B5%E4%BA%94%E4%B8%AA%E6%AD%A5%E9%AA%A4.png)\n\n结构思考力有四个基本特点，也是金字塔原理的四个基本原则：“结论先行”、“以上统下”、“归类分组”和“逻辑递进”。再提炼一下就是“论证类比”四个关键字。其中“以上统下”表示上面的结论是下面理由论证得来的；这个四个基本原则贯穿整个方法的始终，在接收和表达的时候都会用到。\n\n第一步“明确理念打基础”中，最关键的就是要做到“隐形思维显性化”。日常工作生活中我们接收到的信息大多是主题不明确的、逻辑顺序不清晰的，甚至是杂乱无章的，这里我们就需要有意识的对他们进行整理。整理的过程具体包含三个步骤：1，识别信息中的事实、理由及结论；2，找出对应关系、并画出结构图；3，一句话概览出所有内容。\n\n第二步“基于目标定主题”就进入了构思阶段，这一内容要从“确定目标”、“设定主题”和“设计序言”三个方面加以阐述。“确定目标”的意思是，你在一次表达之后，希望对方有哪里行为？这里面的关键在于设定场景，比如你是谁，对方是谁。“设定主题”是基于上一步的目标得来的结论，如“我申请加薪20%”。“设计序言”的目的在于吸引对方的注意力，让对方更容易接受你的观点，它是一次表达的开场白。\n\n第三步“纵向结构分层次”，包含构建金字塔结构的两种方法：一是从上而下的搭建金字塔结构，叫做疑问回答做分解；二是从下往上搭建金字塔结构，叫做概括总结做聚合。其中第一种的方法的目的在于一点点的展开我们的结论，用悬念吸引对方并说服对方。而第二种方法主要针对整理信息，即包括我们从外界得到的信息，也包含我们自己大脑总蹦出的信息。当我们目标十分明确的时候，往往首选第一种方法；如果目标需要提炼才能得到，就只能使用第二种方法了。实际上，大多数情况下都是两种方法同时使用的。\n\n完成了第三步，我们的金字塔结构框架就基本上搭建完成了，这个框架完全符合“结论先行”和“以上统下”的基本原则。这一步我们要把构成框架的要素进一步加工，使他们属于同一类别并且有一定的逻辑顺序。这里面关键就是使这些要素符合“MECE原则”，MECE（Metually Exclusive Collectively Exhaustive）的中文意思就是“相互独立、完全穷尽”“相互独立”意味着问题的细分是在同一维度上并有明确的区分、不可重叠、“完全穷尽”则意味着全面、周密。下图比较形象的呈现了这一原则。\n\n![](http://o7w6l6vti.bkt.clouddn.com/MECE%E5%8E%9F%E5%88%99.png)\n\n通过前面几步，我们已经把很多杂乱无章的概念、思路、想法和经验整理得非常清晰了，但这仅限于我们自己能想明白，要做到别人也能听明白，并且容易记忆，还差最后一步。这里要学习的就是“卖点包装”，有一个很好的例子，出门四件事知道是什么吗？很多人会马上得出答案：“身手钥钱”。这就是一个很成功的包装，即使经过了很多年，我们还是可以很清楚的记得。\n\n\n以上几步就是一个较完整的运用结构思考力的过程。有一家公司在学习完结构思考力的课程之后在管理人员的门上都贴了这样的三句话：“汇报工作是结果，检讨工作说流程，请示工作说方案。” 它可以运用到我们工作生活的方方面面，助力我们做到思考清晰、表达有力，生活清爽、工作高效！\n","source":"_posts/《结构思考力》读书笔记.md","raw":"---\ntitle: 《结构思考力》读书笔记\n---\n\n# 结构化思考\n结构可以说是万物之本，大到宇宙星系、小到颗粒尘埃都有其特定的结构。我们很难想象没有结构的世界是什么样子的。在物质世界，人们通过结构来认识物质；在思维世界，人们也同样通过结构来认识事物、认识其中的规律和美。结构存在于每个整体与局部关系的无穷变化中，每个局部表现整体，而局部的意义又由整体来决定。因此，当我们面临一个问题时，如果可以从结构的视角去审视和思考，一定可以让我们看得更全面、更清晰。\n\n结构思考力是所有人都需要具备的核心技能。罗伯特卡茨在1955年发表过一篇《高效管理者的三大技能》的文章。他认为，高效的管理者应当具备三种基本技能：技术性技能、人际性技能和概念性技能。\n![](http://o7w6l6vti.bkt.clouddn.com/%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E8%80%85%E7%9A%84%E4%B8%89%E5%A4%A7%E6%8A%80%E8%83%BD.png)\n\n概念性技能就是指对复杂情况进行抽象和概念化的技能。而结构化思考的能力就是概念性技能中最关键的技能。它是一种“先总后分”的思考与表达方式，强调先框架后细节，现总结后具体，先结论后原因，先重复后次要。它分为三大阶段五个步骤。\n![](http://o7w6l6vti.bkt.clouddn.com/%E4%B8%89%E5%A4%A7%E9%98%B6%E6%AE%B5%E4%BA%94%E4%B8%AA%E6%AD%A5%E9%AA%A4.png)\n\n结构思考力有四个基本特点，也是金字塔原理的四个基本原则：“结论先行”、“以上统下”、“归类分组”和“逻辑递进”。再提炼一下就是“论证类比”四个关键字。其中“以上统下”表示上面的结论是下面理由论证得来的；这个四个基本原则贯穿整个方法的始终，在接收和表达的时候都会用到。\n\n第一步“明确理念打基础”中，最关键的就是要做到“隐形思维显性化”。日常工作生活中我们接收到的信息大多是主题不明确的、逻辑顺序不清晰的，甚至是杂乱无章的，这里我们就需要有意识的对他们进行整理。整理的过程具体包含三个步骤：1，识别信息中的事实、理由及结论；2，找出对应关系、并画出结构图；3，一句话概览出所有内容。\n\n第二步“基于目标定主题”就进入了构思阶段，这一内容要从“确定目标”、“设定主题”和“设计序言”三个方面加以阐述。“确定目标”的意思是，你在一次表达之后，希望对方有哪里行为？这里面的关键在于设定场景，比如你是谁，对方是谁。“设定主题”是基于上一步的目标得来的结论，如“我申请加薪20%”。“设计序言”的目的在于吸引对方的注意力，让对方更容易接受你的观点，它是一次表达的开场白。\n\n第三步“纵向结构分层次”，包含构建金字塔结构的两种方法：一是从上而下的搭建金字塔结构，叫做疑问回答做分解；二是从下往上搭建金字塔结构，叫做概括总结做聚合。其中第一种的方法的目的在于一点点的展开我们的结论，用悬念吸引对方并说服对方。而第二种方法主要针对整理信息，即包括我们从外界得到的信息，也包含我们自己大脑总蹦出的信息。当我们目标十分明确的时候，往往首选第一种方法；如果目标需要提炼才能得到，就只能使用第二种方法了。实际上，大多数情况下都是两种方法同时使用的。\n\n完成了第三步，我们的金字塔结构框架就基本上搭建完成了，这个框架完全符合“结论先行”和“以上统下”的基本原则。这一步我们要把构成框架的要素进一步加工，使他们属于同一类别并且有一定的逻辑顺序。这里面关键就是使这些要素符合“MECE原则”，MECE（Metually Exclusive Collectively Exhaustive）的中文意思就是“相互独立、完全穷尽”“相互独立”意味着问题的细分是在同一维度上并有明确的区分、不可重叠、“完全穷尽”则意味着全面、周密。下图比较形象的呈现了这一原则。\n\n![](http://o7w6l6vti.bkt.clouddn.com/MECE%E5%8E%9F%E5%88%99.png)\n\n通过前面几步，我们已经把很多杂乱无章的概念、思路、想法和经验整理得非常清晰了，但这仅限于我们自己能想明白，要做到别人也能听明白，并且容易记忆，还差最后一步。这里要学习的就是“卖点包装”，有一个很好的例子，出门四件事知道是什么吗？很多人会马上得出答案：“身手钥钱”。这就是一个很成功的包装，即使经过了很多年，我们还是可以很清楚的记得。\n\n\n以上几步就是一个较完整的运用结构思考力的过程。有一家公司在学习完结构思考力的课程之后在管理人员的门上都贴了这样的三句话：“汇报工作是结果，检讨工作说流程，请示工作说方案。” 它可以运用到我们工作生活的方方面面，助力我们做到思考清晰、表达有力，生活清爽、工作高效！\n","slug":"《结构思考力》读书笔记","published":1,"date":"2017-02-22T12:29:42.000Z","updated":"2017-02-22T12:29:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1opcc50000067bo1xy3saup","content":"<h1 id=\"结构化思考\"><a href=\"#结构化思考\" class=\"headerlink\" title=\"结构化思考\"></a>结构化思考</h1><p>结构可以说是万物之本，大到宇宙星系、小到颗粒尘埃都有其特定的结构。我们很难想象没有结构的世界是什么样子的。在物质世界，人们通过结构来认识物质；在思维世界，人们也同样通过结构来认识事物、认识其中的规律和美。结构存在于每个整体与局部关系的无穷变化中，每个局部表现整体，而局部的意义又由整体来决定。因此，当我们面临一个问题时，如果可以从结构的视角去审视和思考，一定可以让我们看得更全面、更清晰。</p>\n<p>结构思考力是所有人都需要具备的核心技能。罗伯特卡茨在1955年发表过一篇《高效管理者的三大技能》的文章。他认为，高效的管理者应当具备三种基本技能：技术性技能、人际性技能和概念性技能。<br><img src=\"http://o7w6l6vti.bkt.clouddn.com/%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E8%80%85%E7%9A%84%E4%B8%89%E5%A4%A7%E6%8A%80%E8%83%BD.png\" alt=\"\"></p>\n<p>概念性技能就是指对复杂情况进行抽象和概念化的技能。而结构化思考的能力就是概念性技能中最关键的技能。它是一种“先总后分”的思考与表达方式，强调先框架后细节，现总结后具体，先结论后原因，先重复后次要。它分为三大阶段五个步骤。<br><img src=\"http://o7w6l6vti.bkt.clouddn.com/%E4%B8%89%E5%A4%A7%E9%98%B6%E6%AE%B5%E4%BA%94%E4%B8%AA%E6%AD%A5%E9%AA%A4.png\" alt=\"\"></p>\n<p>结构思考力有四个基本特点，也是金字塔原理的四个基本原则：“结论先行”、“以上统下”、“归类分组”和“逻辑递进”。再提炼一下就是“论证类比”四个关键字。其中“以上统下”表示上面的结论是下面理由论证得来的；这个四个基本原则贯穿整个方法的始终，在接收和表达的时候都会用到。</p>\n<p>第一步“明确理念打基础”中，最关键的就是要做到“隐形思维显性化”。日常工作生活中我们接收到的信息大多是主题不明确的、逻辑顺序不清晰的，甚至是杂乱无章的，这里我们就需要有意识的对他们进行整理。整理的过程具体包含三个步骤：1，识别信息中的事实、理由及结论；2，找出对应关系、并画出结构图；3，一句话概览出所有内容。</p>\n<p>第二步“基于目标定主题”就进入了构思阶段，这一内容要从“确定目标”、“设定主题”和“设计序言”三个方面加以阐述。“确定目标”的意思是，你在一次表达之后，希望对方有哪里行为？这里面的关键在于设定场景，比如你是谁，对方是谁。“设定主题”是基于上一步的目标得来的结论，如“我申请加薪20%”。“设计序言”的目的在于吸引对方的注意力，让对方更容易接受你的观点，它是一次表达的开场白。</p>\n<p>第三步“纵向结构分层次”，包含构建金字塔结构的两种方法：一是从上而下的搭建金字塔结构，叫做疑问回答做分解；二是从下往上搭建金字塔结构，叫做概括总结做聚合。其中第一种的方法的目的在于一点点的展开我们的结论，用悬念吸引对方并说服对方。而第二种方法主要针对整理信息，即包括我们从外界得到的信息，也包含我们自己大脑总蹦出的信息。当我们目标十分明确的时候，往往首选第一种方法；如果目标需要提炼才能得到，就只能使用第二种方法了。实际上，大多数情况下都是两种方法同时使用的。</p>\n<p>完成了第三步，我们的金字塔结构框架就基本上搭建完成了，这个框架完全符合“结论先行”和“以上统下”的基本原则。这一步我们要把构成框架的要素进一步加工，使他们属于同一类别并且有一定的逻辑顺序。这里面关键就是使这些要素符合“MECE原则”，MECE（Metually Exclusive Collectively Exhaustive）的中文意思就是“相互独立、完全穷尽”“相互独立”意味着问题的细分是在同一维度上并有明确的区分、不可重叠、“完全穷尽”则意味着全面、周密。下图比较形象的呈现了这一原则。</p>\n<p><img src=\"http://o7w6l6vti.bkt.clouddn.com/MECE%E5%8E%9F%E5%88%99.png\" alt=\"\"></p>\n<p>通过前面几步，我们已经把很多杂乱无章的概念、思路、想法和经验整理得非常清晰了，但这仅限于我们自己能想明白，要做到别人也能听明白，并且容易记忆，还差最后一步。这里要学习的就是“卖点包装”，有一个很好的例子，出门四件事知道是什么吗？很多人会马上得出答案：“身手钥钱”。这就是一个很成功的包装，即使经过了很多年，我们还是可以很清楚的记得。</p>\n<p>以上几步就是一个较完整的运用结构思考力的过程。有一家公司在学习完结构思考力的课程之后在管理人员的门上都贴了这样的三句话：“汇报工作是结果，检讨工作说流程，请示工作说方案。” 它可以运用到我们工作生活的方方面面，助力我们做到思考清晰、表达有力，生活清爽、工作高效！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"结构化思考\"><a href=\"#结构化思考\" class=\"headerlink\" title=\"结构化思考\"></a>结构化思考</h1><p>结构可以说是万物之本，大到宇宙星系、小到颗粒尘埃都有其特定的结构。我们很难想象没有结构的世界是什么样子的。在物质世界，人们通过结构来认识物质；在思维世界，人们也同样通过结构来认识事物、认识其中的规律和美。结构存在于每个整体与局部关系的无穷变化中，每个局部表现整体，而局部的意义又由整体来决定。因此，当我们面临一个问题时，如果可以从结构的视角去审视和思考，一定可以让我们看得更全面、更清晰。</p>\n<p>结构思考力是所有人都需要具备的核心技能。罗伯特卡茨在1955年发表过一篇《高效管理者的三大技能》的文章。他认为，高效的管理者应当具备三种基本技能：技术性技能、人际性技能和概念性技能。<br><img src=\"http://o7w6l6vti.bkt.clouddn.com/%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E8%80%85%E7%9A%84%E4%B8%89%E5%A4%A7%E6%8A%80%E8%83%BD.png\" alt=\"\"></p>\n<p>概念性技能就是指对复杂情况进行抽象和概念化的技能。而结构化思考的能力就是概念性技能中最关键的技能。它是一种“先总后分”的思考与表达方式，强调先框架后细节，现总结后具体，先结论后原因，先重复后次要。它分为三大阶段五个步骤。<br><img src=\"http://o7w6l6vti.bkt.clouddn.com/%E4%B8%89%E5%A4%A7%E9%98%B6%E6%AE%B5%E4%BA%94%E4%B8%AA%E6%AD%A5%E9%AA%A4.png\" alt=\"\"></p>\n<p>结构思考力有四个基本特点，也是金字塔原理的四个基本原则：“结论先行”、“以上统下”、“归类分组”和“逻辑递进”。再提炼一下就是“论证类比”四个关键字。其中“以上统下”表示上面的结论是下面理由论证得来的；这个四个基本原则贯穿整个方法的始终，在接收和表达的时候都会用到。</p>\n<p>第一步“明确理念打基础”中，最关键的就是要做到“隐形思维显性化”。日常工作生活中我们接收到的信息大多是主题不明确的、逻辑顺序不清晰的，甚至是杂乱无章的，这里我们就需要有意识的对他们进行整理。整理的过程具体包含三个步骤：1，识别信息中的事实、理由及结论；2，找出对应关系、并画出结构图；3，一句话概览出所有内容。</p>\n<p>第二步“基于目标定主题”就进入了构思阶段，这一内容要从“确定目标”、“设定主题”和“设计序言”三个方面加以阐述。“确定目标”的意思是，你在一次表达之后，希望对方有哪里行为？这里面的关键在于设定场景，比如你是谁，对方是谁。“设定主题”是基于上一步的目标得来的结论，如“我申请加薪20%”。“设计序言”的目的在于吸引对方的注意力，让对方更容易接受你的观点，它是一次表达的开场白。</p>\n<p>第三步“纵向结构分层次”，包含构建金字塔结构的两种方法：一是从上而下的搭建金字塔结构，叫做疑问回答做分解；二是从下往上搭建金字塔结构，叫做概括总结做聚合。其中第一种的方法的目的在于一点点的展开我们的结论，用悬念吸引对方并说服对方。而第二种方法主要针对整理信息，即包括我们从外界得到的信息，也包含我们自己大脑总蹦出的信息。当我们目标十分明确的时候，往往首选第一种方法；如果目标需要提炼才能得到，就只能使用第二种方法了。实际上，大多数情况下都是两种方法同时使用的。</p>\n<p>完成了第三步，我们的金字塔结构框架就基本上搭建完成了，这个框架完全符合“结论先行”和“以上统下”的基本原则。这一步我们要把构成框架的要素进一步加工，使他们属于同一类别并且有一定的逻辑顺序。这里面关键就是使这些要素符合“MECE原则”，MECE（Metually Exclusive Collectively Exhaustive）的中文意思就是“相互独立、完全穷尽”“相互独立”意味着问题的细分是在同一维度上并有明确的区分、不可重叠、“完全穷尽”则意味着全面、周密。下图比较形象的呈现了这一原则。</p>\n<p><img src=\"http://o7w6l6vti.bkt.clouddn.com/MECE%E5%8E%9F%E5%88%99.png\" alt=\"\"></p>\n<p>通过前面几步，我们已经把很多杂乱无章的概念、思路、想法和经验整理得非常清晰了，但这仅限于我们自己能想明白，要做到别人也能听明白，并且容易记忆，还差最后一步。这里要学习的就是“卖点包装”，有一个很好的例子，出门四件事知道是什么吗？很多人会马上得出答案：“身手钥钱”。这就是一个很成功的包装，即使经过了很多年，我们还是可以很清楚的记得。</p>\n<p>以上几步就是一个较完整的运用结构思考力的过程。有一家公司在学习完结构思考力的课程之后在管理人员的门上都贴了这样的三句话：“汇报工作是结果，检讨工作说流程，请示工作说方案。” 它可以运用到我们工作生活的方方面面，助力我们做到思考清晰、表达有力，生活清爽、工作高效！</p>\n"},{"title":"使用autohotkey修改方向键、回车和启动程序","_content":"\n[autohotkey官网](https://autohotkey.com/)\n\n[autohotkey官方文档](https://autohotkey.com/docs/AutoHotkey.htm)\n\n[官方文档中文版](http://ahkcn.sourceforge.net/docs/AutoHotkey.htm)\n\n### 具体步骤\n\n1.  下载并安装autohotkey。\n\n2.  在你觉得合适的地方鼠标右键-新建-autohotkey script（脚本）；或者创建一个别的文件，再把后缀改成ahk也可以\n\n3.  一个新建的ahk文档里面会有这些东西\n\n   ~~~\n   #NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.\n   ; #Warn  ; Enable warnings to assist with detecting common errors.\n   SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.\n   SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.\n   ~~~\n\n   不用管这些\n\n4.  在下面输入\n\n   ~~~\n   !j::\n      Send, {Down}\n   Return\n\n   !l::\n      Send, {Right}\n   Return\n\n   !h::\n      Send, {Left}\n   Return\n\n   !k::\n      Send, {Up}\n   Return\n   ~~~\n\n   这几句话是把↑改成了alt+k；↓为alt+j；←为alt+h；→为alt+l。如果想用ctrl代替alt，就把`!` 换成`^` 。其他的`+` 代表shift，`#` 代表windows键，更详细的看[这个](http://ahkcn.sourceforge.net/docs/Hotkeys.htm)。如果不需要其他功能了，直接保存并关闭，跳到第 步。\n\n5.  **加入修改回车的功能**。键盘左侧的Capslock（锁定大小写）键使用频率相对还是不高的，而回车键的位置又有点坑，改之。直接复制这段这两行。\n\n   ~~~\n   $CapsLock::Enter\n\n   LAlt & Capslock::SetCapsLockState, % GetKeyState(\"CapsLock\", \"T\") ? \"Off\" : \"On\"\n   ~~~\n\n   这样，左侧的Capslock键就成了回车，以后小量的大写字母用shift+字母，如果有大量的大写字母的输入，用`alt+Capslock` ，跟之前Capslock是一样的。\n\n6.  autohotkey也可以用快捷键启动软件，例如\n\n   ~~~\n   !o::\n      Run, C:\\Program Files\\Everything\\Everything.exe\n   Return\n   ~~~\n\n   现在`alt+o`就是启动everything的快捷键了。同样的，如果想用ctrl代替alt，就把`!` 换成`^` 。其他的`+` 代表shift，`#` 代表windows键，更详细的看[这个](http://ahkcn.sourceforge.net/docs/Hotkeys.htm)。如果想启动其他的软件，就把上面的路径换成你想启动的那个软件的路径机就可以了。\n\n7.  保存，关闭\n\n8.  在编辑好的文件点击鼠标右键，选择编译脚本，也可能是Compile script，也可能是Compile脚本，都是一样的。编译之后就会生成一个`.exe`的文件，把这个文件放到开机启动文件夹中（C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp），每次开机就可以自动启动了。\n","source":"_posts/使用autohotkey修改方向键、回车和启动程序.md","raw":"---\ntitle: 使用autohotkey修改方向键、回车和启动程序\n---\n\n[autohotkey官网](https://autohotkey.com/)\n\n[autohotkey官方文档](https://autohotkey.com/docs/AutoHotkey.htm)\n\n[官方文档中文版](http://ahkcn.sourceforge.net/docs/AutoHotkey.htm)\n\n### 具体步骤\n\n1.  下载并安装autohotkey。\n\n2.  在你觉得合适的地方鼠标右键-新建-autohotkey script（脚本）；或者创建一个别的文件，再把后缀改成ahk也可以\n\n3.  一个新建的ahk文档里面会有这些东西\n\n   ~~~\n   #NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.\n   ; #Warn  ; Enable warnings to assist with detecting common errors.\n   SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.\n   SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.\n   ~~~\n\n   不用管这些\n\n4.  在下面输入\n\n   ~~~\n   !j::\n      Send, {Down}\n   Return\n\n   !l::\n      Send, {Right}\n   Return\n\n   !h::\n      Send, {Left}\n   Return\n\n   !k::\n      Send, {Up}\n   Return\n   ~~~\n\n   这几句话是把↑改成了alt+k；↓为alt+j；←为alt+h；→为alt+l。如果想用ctrl代替alt，就把`!` 换成`^` 。其他的`+` 代表shift，`#` 代表windows键，更详细的看[这个](http://ahkcn.sourceforge.net/docs/Hotkeys.htm)。如果不需要其他功能了，直接保存并关闭，跳到第 步。\n\n5.  **加入修改回车的功能**。键盘左侧的Capslock（锁定大小写）键使用频率相对还是不高的，而回车键的位置又有点坑，改之。直接复制这段这两行。\n\n   ~~~\n   $CapsLock::Enter\n\n   LAlt & Capslock::SetCapsLockState, % GetKeyState(\"CapsLock\", \"T\") ? \"Off\" : \"On\"\n   ~~~\n\n   这样，左侧的Capslock键就成了回车，以后小量的大写字母用shift+字母，如果有大量的大写字母的输入，用`alt+Capslock` ，跟之前Capslock是一样的。\n\n6.  autohotkey也可以用快捷键启动软件，例如\n\n   ~~~\n   !o::\n      Run, C:\\Program Files\\Everything\\Everything.exe\n   Return\n   ~~~\n\n   现在`alt+o`就是启动everything的快捷键了。同样的，如果想用ctrl代替alt，就把`!` 换成`^` 。其他的`+` 代表shift，`#` 代表windows键，更详细的看[这个](http://ahkcn.sourceforge.net/docs/Hotkeys.htm)。如果想启动其他的软件，就把上面的路径换成你想启动的那个软件的路径机就可以了。\n\n7.  保存，关闭\n\n8.  在编辑好的文件点击鼠标右键，选择编译脚本，也可能是Compile script，也可能是Compile脚本，都是一样的。编译之后就会生成一个`.exe`的文件，把这个文件放到开机启动文件夹中（C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp），每次开机就可以自动启动了。\n","slug":"使用autohotkey修改方向键、回车和启动程序","published":1,"date":"2017-04-07T09:14:06.000Z","updated":"2017-04-07T09:14:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1opcc5b000167bocxy2xh7a","content":"<p><a href=\"https://autohotkey.com/\" target=\"_blank\" rel=\"external\">autohotkey官网</a></p>\n<p><a href=\"https://autohotkey.com/docs/AutoHotkey.htm\" target=\"_blank\" rel=\"external\">autohotkey官方文档</a></p>\n<p><a href=\"http://ahkcn.sourceforge.net/docs/AutoHotkey.htm\" target=\"_blank\" rel=\"external\">官方文档中文版</a></p>\n<h3 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h3><ol>\n<li><p>下载并安装autohotkey。</p>\n</li>\n<li><p>在你觉得合适的地方鼠标右键-新建-autohotkey script（脚本）；或者创建一个别的文件，再把后缀改成ahk也可以</p>\n</li>\n<li><p>一个新建的ahk文档里面会有这些东西</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.</div><div class=\"line\">; #Warn  ; Enable warnings to assist with detecting common errors.</div><div class=\"line\">SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.</div><div class=\"line\">SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.</div></pre></td></tr></table></figure>\n<p>不用管这些</p>\n</li>\n<li><p>在下面输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">!j::</div><div class=\"line\">   Send, &#123;Down&#125;</div><div class=\"line\">Return</div><div class=\"line\"></div><div class=\"line\">!l::</div><div class=\"line\">   Send, &#123;Right&#125;</div><div class=\"line\">Return</div><div class=\"line\"></div><div class=\"line\">!h::</div><div class=\"line\">   Send, &#123;Left&#125;</div><div class=\"line\">Return</div><div class=\"line\"></div><div class=\"line\">!k::</div><div class=\"line\">   Send, &#123;Up&#125;</div><div class=\"line\">Return</div></pre></td></tr></table></figure>\n<p>这几句话是把↑改成了alt+k；↓为alt+j；←为alt+h；→为alt+l。如果想用ctrl代替alt，就把<code>!</code> 换成<code>^</code> 。其他的<code>+</code> 代表shift，<code>#</code> 代表windows键，更详细的看<a href=\"http://ahkcn.sourceforge.net/docs/Hotkeys.htm\" target=\"_blank\" rel=\"external\">这个</a>。如果不需要其他功能了，直接保存并关闭，跳到第 步。</p>\n</li>\n<li><p><strong>加入修改回车的功能</strong>。键盘左侧的Capslock（锁定大小写）键使用频率相对还是不高的，而回车键的位置又有点坑，改之。直接复制这段这两行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$CapsLock::Enter</div><div class=\"line\"></div><div class=\"line\">LAlt &amp; Capslock::SetCapsLockState, % GetKeyState(&quot;CapsLock&quot;, &quot;T&quot;) ? &quot;Off&quot; : &quot;On&quot;</div></pre></td></tr></table></figure>\n<p>这样，左侧的Capslock键就成了回车，以后小量的大写字母用shift+字母，如果有大量的大写字母的输入，用<code>alt+Capslock</code> ，跟之前Capslock是一样的。</p>\n</li>\n<li><p>autohotkey也可以用快捷键启动软件，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">!o::</div><div class=\"line\">   Run, C:\\Program Files\\Everything\\Everything.exe</div><div class=\"line\">Return</div></pre></td></tr></table></figure>\n<p>现在<code>alt+o</code>就是启动everything的快捷键了。同样的，如果想用ctrl代替alt，就把<code>!</code> 换成<code>^</code> 。其他的<code>+</code> 代表shift，<code>#</code> 代表windows键，更详细的看<a href=\"http://ahkcn.sourceforge.net/docs/Hotkeys.htm\" target=\"_blank\" rel=\"external\">这个</a>。如果想启动其他的软件，就把上面的路径换成你想启动的那个软件的路径机就可以了。</p>\n</li>\n<li><p>保存，关闭</p>\n</li>\n<li><p>在编辑好的文件点击鼠标右键，选择编译脚本，也可能是Compile script，也可能是Compile脚本，都是一样的。编译之后就会生成一个<code>.exe</code>的文件，把这个文件放到开机启动文件夹中（C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp），每次开机就可以自动启动了。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://autohotkey.com/\">autohotkey官网</a></p>\n<p><a href=\"https://autohotkey.com/docs/AutoHotkey.htm\">autohotkey官方文档</a></p>\n<p><a href=\"http://ahkcn.sourceforge.net/docs/AutoHotkey.htm\">官方文档中文版</a></p>\n<h3 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h3><ol>\n<li><p>下载并安装autohotkey。</p>\n</li>\n<li><p>在你觉得合适的地方鼠标右键-新建-autohotkey script（脚本）；或者创建一个别的文件，再把后缀改成ahk也可以</p>\n</li>\n<li><p>一个新建的ahk文档里面会有这些东西</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.</div><div class=\"line\">; #Warn  ; Enable warnings to assist with detecting common errors.</div><div class=\"line\">SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.</div><div class=\"line\">SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.</div></pre></td></tr></table></figure>\n<p>不用管这些</p>\n</li>\n<li><p>在下面输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">!j::</div><div class=\"line\">   Send, &#123;Down&#125;</div><div class=\"line\">Return</div><div class=\"line\"></div><div class=\"line\">!l::</div><div class=\"line\">   Send, &#123;Right&#125;</div><div class=\"line\">Return</div><div class=\"line\"></div><div class=\"line\">!h::</div><div class=\"line\">   Send, &#123;Left&#125;</div><div class=\"line\">Return</div><div class=\"line\"></div><div class=\"line\">!k::</div><div class=\"line\">   Send, &#123;Up&#125;</div><div class=\"line\">Return</div></pre></td></tr></table></figure>\n<p>这几句话是把↑改成了alt+k；↓为alt+j；←为alt+h；→为alt+l。如果想用ctrl代替alt，就把<code>!</code> 换成<code>^</code> 。其他的<code>+</code> 代表shift，<code>#</code> 代表windows键，更详细的看<a href=\"http://ahkcn.sourceforge.net/docs/Hotkeys.htm\">这个</a>。如果不需要其他功能了，直接保存并关闭，跳到第 步。</p>\n</li>\n<li><p><strong>加入修改回车的功能</strong>。键盘左侧的Capslock（锁定大小写）键使用频率相对还是不高的，而回车键的位置又有点坑，改之。直接复制这段这两行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$CapsLock::Enter</div><div class=\"line\"></div><div class=\"line\">LAlt &amp; Capslock::SetCapsLockState, % GetKeyState(&quot;CapsLock&quot;, &quot;T&quot;) ? &quot;Off&quot; : &quot;On&quot;</div></pre></td></tr></table></figure>\n<p>这样，左侧的Capslock键就成了回车，以后小量的大写字母用shift+字母，如果有大量的大写字母的输入，用<code>alt+Capslock</code> ，跟之前Capslock是一样的。</p>\n</li>\n<li><p>autohotkey也可以用快捷键启动软件，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">!o::</div><div class=\"line\">   Run, C:\\Program Files\\Everything\\Everything.exe</div><div class=\"line\">Return</div></pre></td></tr></table></figure>\n<p>现在<code>alt+o</code>就是启动everything的快捷键了。同样的，如果想用ctrl代替alt，就把<code>!</code> 换成<code>^</code> 。其他的<code>+</code> 代表shift，<code>#</code> 代表windows键，更详细的看<a href=\"http://ahkcn.sourceforge.net/docs/Hotkeys.htm\">这个</a>。如果想启动其他的软件，就把上面的路径换成你想启动的那个软件的路径机就可以了。</p>\n</li>\n<li><p>保存，关闭</p>\n</li>\n<li><p>在编辑好的文件点击鼠标右键，选择编译脚本，也可能是Compile script，也可能是Compile脚本，都是一样的。编译之后就会生成一个<code>.exe</code>的文件，把这个文件放到开机启动文件夹中（C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp），每次开机就可以自动启动了。</p>\n</li>\n</ol>\n"},{"title":"从三个区域理解git命令（基础篇）","_content":"\n# 2.1 获取库\n\n在学习这些下面的命令之前，首先要清楚你的代码的三种状态，已修改、已暂存、以提交。以及他们对应的三个区域：工作目录、暂存区、库。\n\n其实在除这三个区域之外还有一个区域，这个区域是在你的git系统之外的区域，暂且叫它**非跟踪区**，所以我们上面说的三个区域就可以统称为跟踪区了。\n\n下面这个链接是一个git的操作教学。\n\n[](https://try.github.io)\n\n## 库从哪来？\n\n### 两个来源，一个是你的电脑，一个是别人的电脑\n\n**不管在哪，他们现在都在非跟踪区。**所以这一步的意义就是把代码从非跟踪区拉到你git管理的跟踪区。\n\n**如果是你的电脑**，在你写的代码的那个**文件夹**右键，点击git bash here（前提是你要安装了git）；或者在terminal用cd命令到所在文件夹。\n\n然后\n\n```\n$ git init\n```\n\n**如果是别人的电脑** （一般是在服务器），在你觉得方便的文件夹，比如右键你的`新建文件夹` ，点击git bash here，然后输入。\n\n```\n$ git clone https://github.com/libgit2/libgit2\n```\n\n这样在你的新建文件夹里面就有一个libgit2的文件夹了。\n\n当然你也可在克隆的时候顺便把名字改了。\n\n```\n$ git clone https://github.com/libgit2/libgit2 mylibgit\n```\n\n# 开始编程\n\n### 跟踪新文件（新增文件加入git管理范围）\n\n在把需要的东西拉到跟踪区之后（本地库）之后，就可以开始写代码了。\n\n如果你是新建了一个文件写，git不会主动把他划在**跟踪区**，所以你需要用`git add` ；\n\n如果你是在已有的文件里面修改代码，修改好了之后想把它添加到**暂存区**，那你需要用`git add` ；\n\n所以，`git add` 不但可以把文件从非跟踪区拉到工作目录，还可以把文件从工作目录拉到暂存区。 `git add` 还有其他的功能，总之，要把它理解成“**添加内容到下一次提交**”，不要理解成“**把文件增加到项目中**”。\n\n具体举例：\n\n```$ git add README~~~\n$ git add CONTRIBUTING.md\n```\n\n一个一个添加麻烦？\n\n~~~\n$ git add -A\n~~~\n\n`A` 就是`all` ，无论文件在**非跟踪区**还是**工作区**，都通通拉到**暂存区**。\n\n当然`git add` 还有很多其他的细节，具体可以看[这个](https://git-scm.com/docs/git-add)。\n\n### 检查你文件的状态\n\n用过`git add` 之后，或者没有用，无所谓，你都可以用`git staus` 查看你的**工作目录**的里面文件的状态，这个工作目录就是你用git初始化的文件夹，这个命令查看的区域可以包括**非跟踪区**、**工作目录**、**暂存区**。\n\n~~~\n$ git status\n~~~\n\n里面不但显示文件的状态，也会有相应的操作的提示。如果你觉得使用这个命令得到的信息过于冗长，那你就可以试着用`git status -s` 或者 `git status --short` 。\n\n```\n$ git status -s\n M README\nMM Rakefile\nA  lib/git.rb\nM  lib/simplegit.rb\n?? LICENSE.txt\n```\n\n `??` 表示新的且**没有被缓存**的文件,\n\n `A` 新的且**已经被缓存**的文件,\n\n `M` 被修改的文件\n\n`MM` 缓存之后再次修改的。\n\n### 查看文件具体做了哪些修改\n\n```\n$ git diff\n```\n\n### 忽略文件\n\n总是有一些文件你不想被git接手，那就手动忽略他们吧。\n\n创建一个`.gitignore` 的文件，以存放你需要忽略的文件模式。\n\n```\n$ cat .gitignore\n*.[oa]\n*~\n```\n\n “.o” or “.a”表示忽略以`.o`、`.a` 结尾的文件。\n\n第二行的意思是忽略名字里面带有波浪线 (`~`)的文件。\n\n### 提交更改\n\n用了`git add` 把文件拉到**暂存区**之后，就可以提交了。\n\n```\n$ git commit\n```\n\n用 `commit` 加 `-m` 留下提交信息。\n\n```\n$ git commit -m \"Story 182: Fix benchmarks for speed\"\n[master 463dc4f] Story 182: Fix benchmarks for speed\n 2 files changed, 2 insertions(+)\n create mode 100644 README\n```\n\n#### 如果觉得麻烦，可以跳过暂存区\n\n这个命令用到的`all` 与上面说的`git add` 的`all` 是有区别的，`git commit` 的`all` 不包括**非跟踪区**的文件\n\n~~~\n$ git commit -a\n~~~\n\n~~~\n$ git commit -a -m`\n~~~\n\n#### 查看提交历史\n\n~~~\n$ git log\n~~~\n\n# 撤销\n\n#### 修改已提交\n\n**针对的是已提交的文件。**\n\n```\n$ git commit --amend\n```\n\ngit commit --amend命令用来修复最近一次commit. 可以让你合并你缓存区的修改和上一次commit, 而不是提交一个新的快照. 还可以用来编辑上一次的commit描述.记住amend不是修改最近一次commit, 而是整个替换掉他. 对于Git来说是一个新的commit. 如果文件没有变，那就可以用它来修改上一次的描述。\n\n#### 取消已缓存\n\n**在已缓存区**，可以把不想缓存的文件拉出来\n\n```\n$ git reset HEAD CONTRIBUTING.md\n```\n\n#### 撤销已更改\n\n**针对的文件是工作目录里面的文件**，如果是没有缓存的文件，退回到的是上次提交的状态；如果是缓存了之后再次修改的文件，那退回的是缓存之后的状态。这个命令使用要慎重，一旦退回，无法恢复。\n\n~~~\ngit checkout -- <file>\n~~~\n\n# 别名\n\n用 `git config` 简化命令。\n\n```\n$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status\n```\n\n执行了上述的命令后，checkout就变成了co，branch就变成了br，其他两个同理。\n\n如果是想替换`reset HEAD` 这样多单词的命令：\n\n```\n$ git config --global alias.unstage 'reset HEAD --'\n```\n","source":"_posts/从三个区域理解git命令（基础篇）.md","raw":"---\ntitle: 从三个区域理解git命令（基础篇）\n---\n\n# 2.1 获取库\n\n在学习这些下面的命令之前，首先要清楚你的代码的三种状态，已修改、已暂存、以提交。以及他们对应的三个区域：工作目录、暂存区、库。\n\n其实在除这三个区域之外还有一个区域，这个区域是在你的git系统之外的区域，暂且叫它**非跟踪区**，所以我们上面说的三个区域就可以统称为跟踪区了。\n\n下面这个链接是一个git的操作教学。\n\n[](https://try.github.io)\n\n## 库从哪来？\n\n### 两个来源，一个是你的电脑，一个是别人的电脑\n\n**不管在哪，他们现在都在非跟踪区。**所以这一步的意义就是把代码从非跟踪区拉到你git管理的跟踪区。\n\n**如果是你的电脑**，在你写的代码的那个**文件夹**右键，点击git bash here（前提是你要安装了git）；或者在terminal用cd命令到所在文件夹。\n\n然后\n\n```\n$ git init\n```\n\n**如果是别人的电脑** （一般是在服务器），在你觉得方便的文件夹，比如右键你的`新建文件夹` ，点击git bash here，然后输入。\n\n```\n$ git clone https://github.com/libgit2/libgit2\n```\n\n这样在你的新建文件夹里面就有一个libgit2的文件夹了。\n\n当然你也可在克隆的时候顺便把名字改了。\n\n```\n$ git clone https://github.com/libgit2/libgit2 mylibgit\n```\n\n# 开始编程\n\n### 跟踪新文件（新增文件加入git管理范围）\n\n在把需要的东西拉到跟踪区之后（本地库）之后，就可以开始写代码了。\n\n如果你是新建了一个文件写，git不会主动把他划在**跟踪区**，所以你需要用`git add` ；\n\n如果你是在已有的文件里面修改代码，修改好了之后想把它添加到**暂存区**，那你需要用`git add` ；\n\n所以，`git add` 不但可以把文件从非跟踪区拉到工作目录，还可以把文件从工作目录拉到暂存区。 `git add` 还有其他的功能，总之，要把它理解成“**添加内容到下一次提交**”，不要理解成“**把文件增加到项目中**”。\n\n具体举例：\n\n```$ git add README~~~\n$ git add CONTRIBUTING.md\n```\n\n一个一个添加麻烦？\n\n~~~\n$ git add -A\n~~~\n\n`A` 就是`all` ，无论文件在**非跟踪区**还是**工作区**，都通通拉到**暂存区**。\n\n当然`git add` 还有很多其他的细节，具体可以看[这个](https://git-scm.com/docs/git-add)。\n\n### 检查你文件的状态\n\n用过`git add` 之后，或者没有用，无所谓，你都可以用`git staus` 查看你的**工作目录**的里面文件的状态，这个工作目录就是你用git初始化的文件夹，这个命令查看的区域可以包括**非跟踪区**、**工作目录**、**暂存区**。\n\n~~~\n$ git status\n~~~\n\n里面不但显示文件的状态，也会有相应的操作的提示。如果你觉得使用这个命令得到的信息过于冗长，那你就可以试着用`git status -s` 或者 `git status --short` 。\n\n```\n$ git status -s\n M README\nMM Rakefile\nA  lib/git.rb\nM  lib/simplegit.rb\n?? LICENSE.txt\n```\n\n `??` 表示新的且**没有被缓存**的文件,\n\n `A` 新的且**已经被缓存**的文件,\n\n `M` 被修改的文件\n\n`MM` 缓存之后再次修改的。\n\n### 查看文件具体做了哪些修改\n\n```\n$ git diff\n```\n\n### 忽略文件\n\n总是有一些文件你不想被git接手，那就手动忽略他们吧。\n\n创建一个`.gitignore` 的文件，以存放你需要忽略的文件模式。\n\n```\n$ cat .gitignore\n*.[oa]\n*~\n```\n\n “.o” or “.a”表示忽略以`.o`、`.a` 结尾的文件。\n\n第二行的意思是忽略名字里面带有波浪线 (`~`)的文件。\n\n### 提交更改\n\n用了`git add` 把文件拉到**暂存区**之后，就可以提交了。\n\n```\n$ git commit\n```\n\n用 `commit` 加 `-m` 留下提交信息。\n\n```\n$ git commit -m \"Story 182: Fix benchmarks for speed\"\n[master 463dc4f] Story 182: Fix benchmarks for speed\n 2 files changed, 2 insertions(+)\n create mode 100644 README\n```\n\n#### 如果觉得麻烦，可以跳过暂存区\n\n这个命令用到的`all` 与上面说的`git add` 的`all` 是有区别的，`git commit` 的`all` 不包括**非跟踪区**的文件\n\n~~~\n$ git commit -a\n~~~\n\n~~~\n$ git commit -a -m`\n~~~\n\n#### 查看提交历史\n\n~~~\n$ git log\n~~~\n\n# 撤销\n\n#### 修改已提交\n\n**针对的是已提交的文件。**\n\n```\n$ git commit --amend\n```\n\ngit commit --amend命令用来修复最近一次commit. 可以让你合并你缓存区的修改和上一次commit, 而不是提交一个新的快照. 还可以用来编辑上一次的commit描述.记住amend不是修改最近一次commit, 而是整个替换掉他. 对于Git来说是一个新的commit. 如果文件没有变，那就可以用它来修改上一次的描述。\n\n#### 取消已缓存\n\n**在已缓存区**，可以把不想缓存的文件拉出来\n\n```\n$ git reset HEAD CONTRIBUTING.md\n```\n\n#### 撤销已更改\n\n**针对的文件是工作目录里面的文件**，如果是没有缓存的文件，退回到的是上次提交的状态；如果是缓存了之后再次修改的文件，那退回的是缓存之后的状态。这个命令使用要慎重，一旦退回，无法恢复。\n\n~~~\ngit checkout -- <file>\n~~~\n\n# 别名\n\n用 `git config` 简化命令。\n\n```\n$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status\n```\n\n执行了上述的命令后，checkout就变成了co，branch就变成了br，其他两个同理。\n\n如果是想替换`reset HEAD` 这样多单词的命令：\n\n```\n$ git config --global alias.unstage 'reset HEAD --'\n```\n","slug":"从三个区域理解git命令（基础篇）","published":1,"date":"2017-03-20T07:54:58.000Z","updated":"2017-03-20T07:54:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1opcc5m000267bofu8c57ff","content":"<h1 id=\"2-1-获取库\"><a href=\"#2-1-获取库\" class=\"headerlink\" title=\"2.1 获取库\"></a>2.1 获取库</h1><p>在学习这些下面的命令之前，首先要清楚你的代码的三种状态，已修改、已暂存、以提交。以及他们对应的三个区域：工作目录、暂存区、库。</p>\n<p>其实在除这三个区域之外还有一个区域，这个区域是在你的git系统之外的区域，暂且叫它<strong>非跟踪区</strong>，所以我们上面说的三个区域就可以统称为跟踪区了。</p>\n<p>下面这个链接是一个git的操作教学。</p>\n<p><a href=\"https://try.github.io\" target=\"_blank\" rel=\"external\"></a></p>\n<h2 id=\"库从哪来？\"><a href=\"#库从哪来？\" class=\"headerlink\" title=\"库从哪来？\"></a>库从哪来？</h2><h3 id=\"两个来源，一个是你的电脑，一个是别人的电脑\"><a href=\"#两个来源，一个是你的电脑，一个是别人的电脑\" class=\"headerlink\" title=\"两个来源，一个是你的电脑，一个是别人的电脑\"></a>两个来源，一个是你的电脑，一个是别人的电脑</h3><p><strong>不管在哪，他们现在都在非跟踪区。</strong>所以这一步的意义就是把代码从非跟踪区拉到你git管理的跟踪区。</p>\n<p><strong>如果是你的电脑</strong>，在你写的代码的那个<strong>文件夹</strong>右键，点击git bash here（前提是你要安装了git）；或者在terminal用cd命令到所在文件夹。</p>\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div></pre></td></tr></table></figure>\n<p><strong>如果是别人的电脑</strong> （一般是在服务器），在你觉得方便的文件夹，比如右键你的<code>新建文件夹</code> ，点击git bash here，然后输入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/libgit2/libgit2</div></pre></td></tr></table></figure>\n<p>这样在你的新建文件夹里面就有一个libgit2的文件夹了。</p>\n<p>当然你也可在克隆的时候顺便把名字改了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/libgit2/libgit2 mylibgit</div></pre></td></tr></table></figure>\n<h1 id=\"开始编程\"><a href=\"#开始编程\" class=\"headerlink\" title=\"开始编程\"></a>开始编程</h1><h3 id=\"跟踪新文件（新增文件加入git管理范围）\"><a href=\"#跟踪新文件（新增文件加入git管理范围）\" class=\"headerlink\" title=\"跟踪新文件（新增文件加入git管理范围）\"></a>跟踪新文件（新增文件加入git管理范围）</h3><p>在把需要的东西拉到跟踪区之后（本地库）之后，就可以开始写代码了。</p>\n<p>如果你是新建了一个文件写，git不会主动把他划在<strong>跟踪区</strong>，所以你需要用<code>git add</code> ；</p>\n<p>如果你是在已有的文件里面修改代码，修改好了之后想把它添加到<strong>暂存区</strong>，那你需要用<code>git add</code> ；</p>\n<p>所以，<code>git add</code> 不但可以把文件从非跟踪区拉到工作目录，还可以把文件从工作目录拉到暂存区。 <code>git add</code> 还有其他的功能，总之，要把它理解成“<strong>添加内容到下一次提交</strong>”，不要理解成“<strong>把文件增加到项目中</strong>”。</p>\n<p>具体举例：</p>\n<figure class=\"highlight plain\"><figcaption><span>git add README~~~</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add CONTRIBUTING.md</div></pre></td></tr></table></figure>\n<p>一个一个添加麻烦？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div></pre></td></tr></table></figure>\n<p><code>A</code> 就是<code>all</code> ，无论文件在<strong>非跟踪区</strong>还是<strong>工作区</strong>，都通通拉到<strong>暂存区</strong>。</p>\n<p>当然<code>git add</code> 还有很多其他的细节，具体可以看<a href=\"https://git-scm.com/docs/git-add\" target=\"_blank\" rel=\"external\">这个</a>。</p>\n<h3 id=\"检查你文件的状态\"><a href=\"#检查你文件的状态\" class=\"headerlink\" title=\"检查你文件的状态\"></a>检查你文件的状态</h3><p>用过<code>git add</code> 之后，或者没有用，无所谓，你都可以用<code>git staus</code> 查看你的<strong>工作目录</strong>的里面文件的状态，这个工作目录就是你用git初始化的文件夹，这个命令查看的区域可以包括<strong>非跟踪区</strong>、<strong>工作目录</strong>、<strong>暂存区</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div></pre></td></tr></table></figure>\n<p>里面不但显示文件的状态，也会有相应的操作的提示。如果你觉得使用这个命令得到的信息过于冗长，那你就可以试着用<code>git status -s</code> 或者 <code>git status --short</code> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status -s</div><div class=\"line\"> M README</div><div class=\"line\">MM Rakefile</div><div class=\"line\">A  lib/git.rb</div><div class=\"line\">M  lib/simplegit.rb</div><div class=\"line\">?? LICENSE.txt</div></pre></td></tr></table></figure>\n<p> <code>??</code> 表示新的且<strong>没有被缓存</strong>的文件,</p>\n<p> <code>A</code> 新的且<strong>已经被缓存</strong>的文件,</p>\n<p> <code>M</code> 被修改的文件</p>\n<p><code>MM</code> 缓存之后再次修改的。</p>\n<h3 id=\"查看文件具体做了哪些修改\"><a href=\"#查看文件具体做了哪些修改\" class=\"headerlink\" title=\"查看文件具体做了哪些修改\"></a>查看文件具体做了哪些修改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff</div></pre></td></tr></table></figure>\n<h3 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h3><p>总是有一些文件你不想被git接手，那就手动忽略他们吧。</p>\n<p>创建一个<code>.gitignore</code> 的文件，以存放你需要忽略的文件模式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat .gitignore</div><div class=\"line\">*.[oa]</div><div class=\"line\">*~</div></pre></td></tr></table></figure>\n<p> “.o” or “.a”表示忽略以<code>.o</code>、<code>.a</code> 结尾的文件。</p>\n<p>第二行的意思是忽略名字里面带有波浪线 (<code>~</code>)的文件。</p>\n<h3 id=\"提交更改\"><a href=\"#提交更改\" class=\"headerlink\" title=\"提交更改\"></a>提交更改</h3><p>用了<code>git add</code> 把文件拉到<strong>暂存区</strong>之后，就可以提交了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit</div></pre></td></tr></table></figure>\n<p>用 <code>commit</code> 加 <code>-m</code> 留下提交信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m &quot;Story 182: Fix benchmarks for speed&quot;</div><div class=\"line\">[master 463dc4f] Story 182: Fix benchmarks for speed</div><div class=\"line\"> 2 files changed, 2 insertions(+)</div><div class=\"line\"> create mode 100644 README</div></pre></td></tr></table></figure>\n<h4 id=\"如果觉得麻烦，可以跳过暂存区\"><a href=\"#如果觉得麻烦，可以跳过暂存区\" class=\"headerlink\" title=\"如果觉得麻烦，可以跳过暂存区\"></a>如果觉得麻烦，可以跳过暂存区</h4><p>这个命令用到的<code>all</code> 与上面说的<code>git add</code> 的<code>all</code> 是有区别的，<code>git commit</code> 的<code>all</code> 不包括<strong>非跟踪区</strong>的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -a</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -a -m`</div></pre></td></tr></table></figure>\n<h4 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git log</div></pre></td></tr></table></figure>\n<h1 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h1><h4 id=\"修改已提交\"><a href=\"#修改已提交\" class=\"headerlink\" title=\"修改已提交\"></a>修改已提交</h4><p><strong>针对的是已提交的文件。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit --amend</div></pre></td></tr></table></figure>\n<p>git commit –amend命令用来修复最近一次commit. 可以让你合并你缓存区的修改和上一次commit, 而不是提交一个新的快照. 还可以用来编辑上一次的commit描述.记住amend不是修改最近一次commit, 而是整个替换掉他. 对于Git来说是一个新的commit. 如果文件没有变，那就可以用它来修改上一次的描述。</p>\n<h4 id=\"取消已缓存\"><a href=\"#取消已缓存\" class=\"headerlink\" title=\"取消已缓存\"></a>取消已缓存</h4><p><strong>在已缓存区</strong>，可以把不想缓存的文件拉出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset HEAD CONTRIBUTING.md</div></pre></td></tr></table></figure>\n<h4 id=\"撤销已更改\"><a href=\"#撤销已更改\" class=\"headerlink\" title=\"撤销已更改\"></a>撤销已更改</h4><p><strong>针对的文件是工作目录里面的文件</strong>，如果是没有缓存的文件，退回到的是上次提交的状态；如果是缓存了之后再次修改的文件，那退回的是缓存之后的状态。这个命令使用要慎重，一旦退回，无法恢复。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -- &lt;file&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"别名\"><a href=\"#别名\" class=\"headerlink\" title=\"别名\"></a>别名</h1><p>用 <code>git config</code> 简化命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global alias.co checkout</div><div class=\"line\">$ git config --global alias.br branch</div><div class=\"line\">$ git config --global alias.ci commit</div><div class=\"line\">$ git config --global alias.st status</div></pre></td></tr></table></figure>\n<p>执行了上述的命令后，checkout就变成了co，branch就变成了br，其他两个同理。</p>\n<p>如果是想替换<code>reset HEAD</code> 这样多单词的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global alias.unstage &apos;reset HEAD --&apos;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2-1-获取库\"><a href=\"#2-1-获取库\" class=\"headerlink\" title=\"2.1 获取库\"></a>2.1 获取库</h1><p>在学习这些下面的命令之前，首先要清楚你的代码的三种状态，已修改、已暂存、以提交。以及他们对应的三个区域：工作目录、暂存区、库。</p>\n<p>其实在除这三个区域之外还有一个区域，这个区域是在你的git系统之外的区域，暂且叫它<strong>非跟踪区</strong>，所以我们上面说的三个区域就可以统称为跟踪区了。</p>\n<p>下面这个链接是一个git的操作教学。</p>\n<p><a href=\"https://try.github.io\"></a></p>\n<h2 id=\"库从哪来？\"><a href=\"#库从哪来？\" class=\"headerlink\" title=\"库从哪来？\"></a>库从哪来？</h2><h3 id=\"两个来源，一个是你的电脑，一个是别人的电脑\"><a href=\"#两个来源，一个是你的电脑，一个是别人的电脑\" class=\"headerlink\" title=\"两个来源，一个是你的电脑，一个是别人的电脑\"></a>两个来源，一个是你的电脑，一个是别人的电脑</h3><p><strong>不管在哪，他们现在都在非跟踪区。</strong>所以这一步的意义就是把代码从非跟踪区拉到你git管理的跟踪区。</p>\n<p><strong>如果是你的电脑</strong>，在你写的代码的那个<strong>文件夹</strong>右键，点击git bash here（前提是你要安装了git）；或者在terminal用cd命令到所在文件夹。</p>\n<p>然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div></pre></td></tr></table></figure>\n<p><strong>如果是别人的电脑</strong> （一般是在服务器），在你觉得方便的文件夹，比如右键你的<code>新建文件夹</code> ，点击git bash here，然后输入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/libgit2/libgit2</div></pre></td></tr></table></figure>\n<p>这样在你的新建文件夹里面就有一个libgit2的文件夹了。</p>\n<p>当然你也可在克隆的时候顺便把名字改了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/libgit2/libgit2 mylibgit</div></pre></td></tr></table></figure>\n<h1 id=\"开始编程\"><a href=\"#开始编程\" class=\"headerlink\" title=\"开始编程\"></a>开始编程</h1><h3 id=\"跟踪新文件（新增文件加入git管理范围）\"><a href=\"#跟踪新文件（新增文件加入git管理范围）\" class=\"headerlink\" title=\"跟踪新文件（新增文件加入git管理范围）\"></a>跟踪新文件（新增文件加入git管理范围）</h3><p>在把需要的东西拉到跟踪区之后（本地库）之后，就可以开始写代码了。</p>\n<p>如果你是新建了一个文件写，git不会主动把他划在<strong>跟踪区</strong>，所以你需要用<code>git add</code> ；</p>\n<p>如果你是在已有的文件里面修改代码，修改好了之后想把它添加到<strong>暂存区</strong>，那你需要用<code>git add</code> ；</p>\n<p>所以，<code>git add</code> 不但可以把文件从非跟踪区拉到工作目录，还可以把文件从工作目录拉到暂存区。 <code>git add</code> 还有其他的功能，总之，要把它理解成“<strong>添加内容到下一次提交</strong>”，不要理解成“<strong>把文件增加到项目中</strong>”。</p>\n<p>具体举例：</p>\n<figure class=\"highlight plain\"><figcaption><span>git add README~~~</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add CONTRIBUTING.md</div></pre></td></tr></table></figure>\n<p>一个一个添加麻烦？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add -A</div></pre></td></tr></table></figure>\n<p><code>A</code> 就是<code>all</code> ，无论文件在<strong>非跟踪区</strong>还是<strong>工作区</strong>，都通通拉到<strong>暂存区</strong>。</p>\n<p>当然<code>git add</code> 还有很多其他的细节，具体可以看<a href=\"https://git-scm.com/docs/git-add\">这个</a>。</p>\n<h3 id=\"检查你文件的状态\"><a href=\"#检查你文件的状态\" class=\"headerlink\" title=\"检查你文件的状态\"></a>检查你文件的状态</h3><p>用过<code>git add</code> 之后，或者没有用，无所谓，你都可以用<code>git staus</code> 查看你的<strong>工作目录</strong>的里面文件的状态，这个工作目录就是你用git初始化的文件夹，这个命令查看的区域可以包括<strong>非跟踪区</strong>、<strong>工作目录</strong>、<strong>暂存区</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div></pre></td></tr></table></figure>\n<p>里面不但显示文件的状态，也会有相应的操作的提示。如果你觉得使用这个命令得到的信息过于冗长，那你就可以试着用<code>git status -s</code> 或者 <code>git status --short</code> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status -s</div><div class=\"line\"> M README</div><div class=\"line\">MM Rakefile</div><div class=\"line\">A  lib/git.rb</div><div class=\"line\">M  lib/simplegit.rb</div><div class=\"line\">?? LICENSE.txt</div></pre></td></tr></table></figure>\n<p> <code>??</code> 表示新的且<strong>没有被缓存</strong>的文件,</p>\n<p> <code>A</code> 新的且<strong>已经被缓存</strong>的文件,</p>\n<p> <code>M</code> 被修改的文件</p>\n<p><code>MM</code> 缓存之后再次修改的。</p>\n<h3 id=\"查看文件具体做了哪些修改\"><a href=\"#查看文件具体做了哪些修改\" class=\"headerlink\" title=\"查看文件具体做了哪些修改\"></a>查看文件具体做了哪些修改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff</div></pre></td></tr></table></figure>\n<h3 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h3><p>总是有一些文件你不想被git接手，那就手动忽略他们吧。</p>\n<p>创建一个<code>.gitignore</code> 的文件，以存放你需要忽略的文件模式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat .gitignore</div><div class=\"line\">*.[oa]</div><div class=\"line\">*~</div></pre></td></tr></table></figure>\n<p> “.o” or “.a”表示忽略以<code>.o</code>、<code>.a</code> 结尾的文件。</p>\n<p>第二行的意思是忽略名字里面带有波浪线 (<code>~</code>)的文件。</p>\n<h3 id=\"提交更改\"><a href=\"#提交更改\" class=\"headerlink\" title=\"提交更改\"></a>提交更改</h3><p>用了<code>git add</code> 把文件拉到<strong>暂存区</strong>之后，就可以提交了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit</div></pre></td></tr></table></figure>\n<p>用 <code>commit</code> 加 <code>-m</code> 留下提交信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m &quot;Story 182: Fix benchmarks for speed&quot;</div><div class=\"line\">[master 463dc4f] Story 182: Fix benchmarks for speed</div><div class=\"line\"> 2 files changed, 2 insertions(+)</div><div class=\"line\"> create mode 100644 README</div></pre></td></tr></table></figure>\n<h4 id=\"如果觉得麻烦，可以跳过暂存区\"><a href=\"#如果觉得麻烦，可以跳过暂存区\" class=\"headerlink\" title=\"如果觉得麻烦，可以跳过暂存区\"></a>如果觉得麻烦，可以跳过暂存区</h4><p>这个命令用到的<code>all</code> 与上面说的<code>git add</code> 的<code>all</code> 是有区别的，<code>git commit</code> 的<code>all</code> 不包括<strong>非跟踪区</strong>的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -a</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -a -m`</div></pre></td></tr></table></figure>\n<h4 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git log</div></pre></td></tr></table></figure>\n<h1 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h1><h4 id=\"修改已提交\"><a href=\"#修改已提交\" class=\"headerlink\" title=\"修改已提交\"></a>修改已提交</h4><p><strong>针对的是已提交的文件。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit --amend</div></pre></td></tr></table></figure>\n<p>git commit –amend命令用来修复最近一次commit. 可以让你合并你缓存区的修改和上一次commit, 而不是提交一个新的快照. 还可以用来编辑上一次的commit描述.记住amend不是修改最近一次commit, 而是整个替换掉他. 对于Git来说是一个新的commit. 如果文件没有变，那就可以用它来修改上一次的描述。</p>\n<h4 id=\"取消已缓存\"><a href=\"#取消已缓存\" class=\"headerlink\" title=\"取消已缓存\"></a>取消已缓存</h4><p><strong>在已缓存区</strong>，可以把不想缓存的文件拉出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset HEAD CONTRIBUTING.md</div></pre></td></tr></table></figure>\n<h4 id=\"撤销已更改\"><a href=\"#撤销已更改\" class=\"headerlink\" title=\"撤销已更改\"></a>撤销已更改</h4><p><strong>针对的文件是工作目录里面的文件</strong>，如果是没有缓存的文件，退回到的是上次提交的状态；如果是缓存了之后再次修改的文件，那退回的是缓存之后的状态。这个命令使用要慎重，一旦退回，无法恢复。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -- &lt;file&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"别名\"><a href=\"#别名\" class=\"headerlink\" title=\"别名\"></a>别名</h1><p>用 <code>git config</code> 简化命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global alias.co checkout</div><div class=\"line\">$ git config --global alias.br branch</div><div class=\"line\">$ git config --global alias.ci commit</div><div class=\"line\">$ git config --global alias.st status</div></pre></td></tr></table></figure>\n<p>执行了上述的命令后，checkout就变成了co，branch就变成了br，其他两个同理。</p>\n<p>如果是想替换<code>reset HEAD</code> 这样多单词的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global alias.unstage &apos;reset HEAD --&apos;</div></pre></td></tr></table></figure>\n"},{"title":"一个关于回调函数的例子以及异步程序和非阻塞I/O的理解","_content":"\n\nJavaScript有一个明显的特征：第一类函数（first-class functions）[（wiki）](https://en.wikipedia.org/wiki/First-class_function) 。\n\n与第一类函数有关的名词还有第一类对象和第一类公民（头等公民）[（wiki）](https://en.wikipedia.org/wiki/First-class_citizen) ，在JavaScript中，函数是第一类对象或者说是第一类公民，简单理解，就是权限很大，可调用的资源多。这是因为这样，它才可以被当做参数或变量来使用。\n\n对于异步程序和非阻塞I/O，记得在知乎上看到过一个非常好的举例：你给图书馆打电话查书，图书馆的管理员会有两种反应，第一种：“麻烦等一下，不用挂电话，我查一下”；第二种：“知道了，等我查到了我给您回电话”。这里面的区别，一个在你，一个在电话线路。第一种情况下，你不能去干别的，只能老老实实的在电话前面等着，而且，别人在这段时间里没法给你打电话了。第二种情况就无所谓了，你可以去high，去耍，去上厕所，其他的朋友给你打电话你也接的到。第一种情况就是同步的、阻塞的，第二种就是异步的、非阻塞的。\n\n下面是一个nodejs的例子，创建一个rectangle-2.js的文件\n\n~~~\nmodule.exports = function(x,y,callback) {\n  try {\n    if (x < 0 || y < 0) {\n        throw new Error(\"Rectangle dimensions should be greater than zero: l = \"\n                            + x + \", and b = \" + y);\n    }\n    else\n         callback(null, {\n            perimeter: function () {\n        \t\t   return (2*(x+y));\n\t\t\t},\n            area:function () {\n        \t\t    return (x*y);\n\t\t\t}\n    });\n  }\n  catch (error) {\n        callback(error,null);\n  }\n}\n~~~\n\n在创建一个*solve-2.js*的文件\n\n~~~\nvar rect = require('./rectangle-2');\n\nfunction solveRect(l,b) {\n    console.log(\"Solving for rectangle with l = \"\n                + l + \" and b = \" + b);\n    rect(l,b, function(err,rectangle) {\n        if (err) {\n\t    console.log(err);\n\t}\n\telse {\n\t    console.log(\"The area of a rectangle of dimensions length = \"\n                 + l + \" and breadth = \" + b + \" is \" + rectangle.area());\n            console.log(\"The perimeter of a rectangle of dimensions length = \"\n                 + l + \" and breadth = \" + b + \" is \" + rectangle.perimeter());\n\t}\n    });\n};\n\nsolveRect(2,4);\nsolveRect(3,5);\nsolveRect(-3,5);\n~~~\n\n程序是这样运行的，用node命令\n\n~~~\nnode solve-2\n~~~\n\n1.  运行solve-2.js，rectangle-2.js文件被引用，并赋值给变量rect。\n2.  在最后几行，函数solveRect被调用三次，分别赋值(2,4)、(3,5)和(-3,5)，\n3.  在函数solveRect运行到调用rect时，也相当于是一个赋值的过程，l赋值给rectangle-2.js文件中函数的x，b赋值给y，rect的第三个参数，也就是那个匿名方程，赋值给了callback。到这里solve-2.js就运行完了，可以该干嘛干嘛了。\n4.  目光放到rectangle-2.js，程序运行，先在try里面判断，确定符合要求之后，就运行callback函数，也就是第三步中赋值给callback的那个函数，求得结果。\n","source":"_posts/一个关于闭包、回调函数和异步程序的例子.md","raw":"---\ntitle: 一个关于回调函数的例子以及异步程序和非阻塞I/O的理解\n---\n\n\nJavaScript有一个明显的特征：第一类函数（first-class functions）[（wiki）](https://en.wikipedia.org/wiki/First-class_function) 。\n\n与第一类函数有关的名词还有第一类对象和第一类公民（头等公民）[（wiki）](https://en.wikipedia.org/wiki/First-class_citizen) ，在JavaScript中，函数是第一类对象或者说是第一类公民，简单理解，就是权限很大，可调用的资源多。这是因为这样，它才可以被当做参数或变量来使用。\n\n对于异步程序和非阻塞I/O，记得在知乎上看到过一个非常好的举例：你给图书馆打电话查书，图书馆的管理员会有两种反应，第一种：“麻烦等一下，不用挂电话，我查一下”；第二种：“知道了，等我查到了我给您回电话”。这里面的区别，一个在你，一个在电话线路。第一种情况下，你不能去干别的，只能老老实实的在电话前面等着，而且，别人在这段时间里没法给你打电话了。第二种情况就无所谓了，你可以去high，去耍，去上厕所，其他的朋友给你打电话你也接的到。第一种情况就是同步的、阻塞的，第二种就是异步的、非阻塞的。\n\n下面是一个nodejs的例子，创建一个rectangle-2.js的文件\n\n~~~\nmodule.exports = function(x,y,callback) {\n  try {\n    if (x < 0 || y < 0) {\n        throw new Error(\"Rectangle dimensions should be greater than zero: l = \"\n                            + x + \", and b = \" + y);\n    }\n    else\n         callback(null, {\n            perimeter: function () {\n        \t\t   return (2*(x+y));\n\t\t\t},\n            area:function () {\n        \t\t    return (x*y);\n\t\t\t}\n    });\n  }\n  catch (error) {\n        callback(error,null);\n  }\n}\n~~~\n\n在创建一个*solve-2.js*的文件\n\n~~~\nvar rect = require('./rectangle-2');\n\nfunction solveRect(l,b) {\n    console.log(\"Solving for rectangle with l = \"\n                + l + \" and b = \" + b);\n    rect(l,b, function(err,rectangle) {\n        if (err) {\n\t    console.log(err);\n\t}\n\telse {\n\t    console.log(\"The area of a rectangle of dimensions length = \"\n                 + l + \" and breadth = \" + b + \" is \" + rectangle.area());\n            console.log(\"The perimeter of a rectangle of dimensions length = \"\n                 + l + \" and breadth = \" + b + \" is \" + rectangle.perimeter());\n\t}\n    });\n};\n\nsolveRect(2,4);\nsolveRect(3,5);\nsolveRect(-3,5);\n~~~\n\n程序是这样运行的，用node命令\n\n~~~\nnode solve-2\n~~~\n\n1.  运行solve-2.js，rectangle-2.js文件被引用，并赋值给变量rect。\n2.  在最后几行，函数solveRect被调用三次，分别赋值(2,4)、(3,5)和(-3,5)，\n3.  在函数solveRect运行到调用rect时，也相当于是一个赋值的过程，l赋值给rectangle-2.js文件中函数的x，b赋值给y，rect的第三个参数，也就是那个匿名方程，赋值给了callback。到这里solve-2.js就运行完了，可以该干嘛干嘛了。\n4.  目光放到rectangle-2.js，程序运行，先在try里面判断，确定符合要求之后，就运行callback函数，也就是第三步中赋值给callback的那个函数，求得结果。\n","slug":"一个关于闭包、回调函数和异步程序的例子","published":1,"date":"2017-03-25T09:10:08.000Z","updated":"2017-03-25T09:10:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1opcc5p000367bonrt7pc8u","content":"<p>JavaScript有一个明显的特征：第一类函数（first-class functions）<a href=\"https://en.wikipedia.org/wiki/First-class_function\" target=\"_blank\" rel=\"external\">（wiki）</a> 。</p>\n<p>与第一类函数有关的名词还有第一类对象和第一类公民（头等公民）<a href=\"https://en.wikipedia.org/wiki/First-class_citizen\" target=\"_blank\" rel=\"external\">（wiki）</a> ，在JavaScript中，函数是第一类对象或者说是第一类公民，简单理解，就是权限很大，可调用的资源多。这是因为这样，它才可以被当做参数或变量来使用。</p>\n<p>对于异步程序和非阻塞I/O，记得在知乎上看到过一个非常好的举例：你给图书馆打电话查书，图书馆的管理员会有两种反应，第一种：“麻烦等一下，不用挂电话，我查一下”；第二种：“知道了，等我查到了我给您回电话”。这里面的区别，一个在你，一个在电话线路。第一种情况下，你不能去干别的，只能老老实实的在电话前面等着，而且，别人在这段时间里没法给你打电话了。第二种情况就无所谓了，你可以去high，去耍，去上厕所，其他的朋友给你打电话你也接的到。第一种情况就是同步的、阻塞的，第二种就是异步的、非阻塞的。</p>\n<p>下面是一个nodejs的例子，创建一个rectangle-2.js的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = function(x,y,callback) &#123;</div><div class=\"line\">  try &#123;</div><div class=\"line\">    if (x &lt; 0 || y &lt; 0) &#123;</div><div class=\"line\">        throw new Error(&quot;Rectangle dimensions should be greater than zero: l = &quot;</div><div class=\"line\">                            + x + &quot;, and b = &quot; + y);</div><div class=\"line\">    &#125;</div><div class=\"line\">    else</div><div class=\"line\">         callback(null, &#123;</div><div class=\"line\">            perimeter: function () &#123;</div><div class=\"line\">        \t\t   return (2*(x+y));</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">            area:function () &#123;</div><div class=\"line\">        \t\t    return (x*y);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  catch (error) &#123;</div><div class=\"line\">        callback(error,null);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在创建一个<em>solve-2.js</em>的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var rect = require(&apos;./rectangle-2&apos;);</div><div class=\"line\"></div><div class=\"line\">function solveRect(l,b) &#123;</div><div class=\"line\">    console.log(&quot;Solving for rectangle with l = &quot;</div><div class=\"line\">                + l + &quot; and b = &quot; + b);</div><div class=\"line\">    rect(l,b, function(err,rectangle) &#123;</div><div class=\"line\">        if (err) &#123;</div><div class=\"line\">\t    console.log(err);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\telse &#123;</div><div class=\"line\">\t    console.log(&quot;The area of a rectangle of dimensions length = &quot;</div><div class=\"line\">                 + l + &quot; and breadth = &quot; + b + &quot; is &quot; + rectangle.area());</div><div class=\"line\">            console.log(&quot;The perimeter of a rectangle of dimensions length = &quot;</div><div class=\"line\">                 + l + &quot; and breadth = &quot; + b + &quot; is &quot; + rectangle.perimeter());</div><div class=\"line\">\t&#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">solveRect(2,4);</div><div class=\"line\">solveRect(3,5);</div><div class=\"line\">solveRect(-3,5);</div></pre></td></tr></table></figure>\n<p>程序是这样运行的，用node命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node solve-2</div></pre></td></tr></table></figure>\n<ol>\n<li>运行solve-2.js，rectangle-2.js文件被引用，并赋值给变量rect。</li>\n<li>在最后几行，函数solveRect被调用三次，分别赋值(2,4)、(3,5)和(-3,5)，</li>\n<li>在函数solveRect运行到调用rect时，也相当于是一个赋值的过程，l赋值给rectangle-2.js文件中函数的x，b赋值给y，rect的第三个参数，也就是那个匿名方程，赋值给了callback。到这里solve-2.js就运行完了，可以该干嘛干嘛了。</li>\n<li>目光放到rectangle-2.js，程序运行，先在try里面判断，确定符合要求之后，就运行callback函数，也就是第三步中赋值给callback的那个函数，求得结果。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>JavaScript有一个明显的特征：第一类函数（first-class functions）<a href=\"https://en.wikipedia.org/wiki/First-class_function\">（wiki）</a> 。</p>\n<p>与第一类函数有关的名词还有第一类对象和第一类公民（头等公民）<a href=\"https://en.wikipedia.org/wiki/First-class_citizen\">（wiki）</a> ，在JavaScript中，函数是第一类对象或者说是第一类公民，简单理解，就是权限很大，可调用的资源多。这是因为这样，它才可以被当做参数或变量来使用。</p>\n<p>对于异步程序和非阻塞I/O，记得在知乎上看到过一个非常好的举例：你给图书馆打电话查书，图书馆的管理员会有两种反应，第一种：“麻烦等一下，不用挂电话，我查一下”；第二种：“知道了，等我查到了我给您回电话”。这里面的区别，一个在你，一个在电话线路。第一种情况下，你不能去干别的，只能老老实实的在电话前面等着，而且，别人在这段时间里没法给你打电话了。第二种情况就无所谓了，你可以去high，去耍，去上厕所，其他的朋友给你打电话你也接的到。第一种情况就是同步的、阻塞的，第二种就是异步的、非阻塞的。</p>\n<p>下面是一个nodejs的例子，创建一个rectangle-2.js的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = function(x,y,callback) &#123;</div><div class=\"line\">  try &#123;</div><div class=\"line\">    if (x &lt; 0 || y &lt; 0) &#123;</div><div class=\"line\">        throw new Error(&quot;Rectangle dimensions should be greater than zero: l = &quot;</div><div class=\"line\">                            + x + &quot;, and b = &quot; + y);</div><div class=\"line\">    &#125;</div><div class=\"line\">    else</div><div class=\"line\">         callback(null, &#123;</div><div class=\"line\">            perimeter: function () &#123;</div><div class=\"line\">        \t\t   return (2*(x+y));</div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">            area:function () &#123;</div><div class=\"line\">        \t\t    return (x*y);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  catch (error) &#123;</div><div class=\"line\">        callback(error,null);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在创建一个<em>solve-2.js</em>的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var rect = require(&apos;./rectangle-2&apos;);</div><div class=\"line\"></div><div class=\"line\">function solveRect(l,b) &#123;</div><div class=\"line\">    console.log(&quot;Solving for rectangle with l = &quot;</div><div class=\"line\">                + l + &quot; and b = &quot; + b);</div><div class=\"line\">    rect(l,b, function(err,rectangle) &#123;</div><div class=\"line\">        if (err) &#123;</div><div class=\"line\">\t    console.log(err);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\telse &#123;</div><div class=\"line\">\t    console.log(&quot;The area of a rectangle of dimensions length = &quot;</div><div class=\"line\">                 + l + &quot; and breadth = &quot; + b + &quot; is &quot; + rectangle.area());</div><div class=\"line\">            console.log(&quot;The perimeter of a rectangle of dimensions length = &quot;</div><div class=\"line\">                 + l + &quot; and breadth = &quot; + b + &quot; is &quot; + rectangle.perimeter());</div><div class=\"line\">\t&#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">solveRect(2,4);</div><div class=\"line\">solveRect(3,5);</div><div class=\"line\">solveRect(-3,5);</div></pre></td></tr></table></figure>\n<p>程序是这样运行的，用node命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node solve-2</div></pre></td></tr></table></figure>\n<ol>\n<li>运行solve-2.js，rectangle-2.js文件被引用，并赋值给变量rect。</li>\n<li>在最后几行，函数solveRect被调用三次，分别赋值(2,4)、(3,5)和(-3,5)，</li>\n<li>在函数solveRect运行到调用rect时，也相当于是一个赋值的过程，l赋值给rectangle-2.js文件中函数的x，b赋值给y，rect的第三个参数，也就是那个匿名方程，赋值给了callback。到这里solve-2.js就运行完了，可以该干嘛干嘛了。</li>\n<li>目光放到rectangle-2.js，程序运行，先在try里面判断，确定符合要求之后，就运行callback函数，也就是第三步中赋值给callback的那个函数，求得结果。</li>\n</ol>\n"},{"title":"初学git的一些基础知识","_content":"\n### 版本控制\n\n​\t提到git就不得不说版本控制，与git相关的系统都是版本控制系统，他们用于记录文件的更改以便随时可以返回需要的特定版本。它的发展历史，概括的说就是从可操作文件一个到多个，从单人工作到多人协同，从集中式到分布式。\n\n### git工作原理\n\n​\tgit是一个DRCS（distributed revision control system），它来自偶然，产于赌气。git 的工作原理也是它与其他版本控制软件的本质区别，每一次提交都相当于一个**快照**，改动的文件做记录，未改动的文件做链接。如下图，每一个纵向的**version**就是一个快照。\n\n![Git stores data as snapshots of the project over time.](https://git-scm.com/book/en/v2/images/snapshots.png)\n\n### git工作流程\n\n​\tgit有三种状态，**Committed**（已提交），**Modified**（已修改）和**Staged**（已暂存）。已提交指的是文件已经老老实实地躺在你的数据库里面了；已修改是指已经变动但是并没有提交；已暂存的标示你已经**标记**这一次修改，但是标记的快照并没有合并到你的数据库里面。三种状态分别对应git的三个工作区域：**the Git directory**（本地仓库）, **the working tree**（工作目录）, **and the staging area**（暂存区域）。\n\n![点击查看源网页](http://images0.cnblogs.com/blog2015/512650/201508/181930031754207.png)\n\n所以，当我们使用git 的时候，我们的工作流程是这样的：\n\n1.  修改工作目录中的文件；\n2.  标记快照暂存；\n3.  提交到库。\n\n### 参考文件\n\n<http://ericsink.com/vcbe/html/history_of_version_control.html>\n\n<https://git-scm.com/book/en/v2/Getting-Started-Git-Basics>\n","source":"_posts/初学git的一些基础知识.md","raw":"---\ntitle: 初学git的一些基础知识\n---\n\n### 版本控制\n\n​\t提到git就不得不说版本控制，与git相关的系统都是版本控制系统，他们用于记录文件的更改以便随时可以返回需要的特定版本。它的发展历史，概括的说就是从可操作文件一个到多个，从单人工作到多人协同，从集中式到分布式。\n\n### git工作原理\n\n​\tgit是一个DRCS（distributed revision control system），它来自偶然，产于赌气。git 的工作原理也是它与其他版本控制软件的本质区别，每一次提交都相当于一个**快照**，改动的文件做记录，未改动的文件做链接。如下图，每一个纵向的**version**就是一个快照。\n\n![Git stores data as snapshots of the project over time.](https://git-scm.com/book/en/v2/images/snapshots.png)\n\n### git工作流程\n\n​\tgit有三种状态，**Committed**（已提交），**Modified**（已修改）和**Staged**（已暂存）。已提交指的是文件已经老老实实地躺在你的数据库里面了；已修改是指已经变动但是并没有提交；已暂存的标示你已经**标记**这一次修改，但是标记的快照并没有合并到你的数据库里面。三种状态分别对应git的三个工作区域：**the Git directory**（本地仓库）, **the working tree**（工作目录）, **and the staging area**（暂存区域）。\n\n![点击查看源网页](http://images0.cnblogs.com/blog2015/512650/201508/181930031754207.png)\n\n所以，当我们使用git 的时候，我们的工作流程是这样的：\n\n1.  修改工作目录中的文件；\n2.  标记快照暂存；\n3.  提交到库。\n\n### 参考文件\n\n<http://ericsink.com/vcbe/html/history_of_version_control.html>\n\n<https://git-scm.com/book/en/v2/Getting-Started-Git-Basics>\n","slug":"初学git的一些基础知识","published":1,"date":"2017-02-22T07:03:06.000Z","updated":"2017-02-22T07:03:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1opcc5r000467bocl8pf6rv","content":"<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><p>​    提到git就不得不说版本控制，与git相关的系统都是版本控制系统，他们用于记录文件的更改以便随时可以返回需要的特定版本。它的发展历史，概括的说就是从可操作文件一个到多个，从单人工作到多人协同，从集中式到分布式。</p>\n<h3 id=\"git工作原理\"><a href=\"#git工作原理\" class=\"headerlink\" title=\"git工作原理\"></a>git工作原理</h3><p>​    git是一个DRCS（distributed revision control system），它来自偶然，产于赌气。git 的工作原理也是它与其他版本控制软件的本质区别，每一次提交都相当于一个<strong>快照</strong>，改动的文件做记录，未改动的文件做链接。如下图，每一个纵向的<strong>version</strong>就是一个快照。</p>\n<p><img src=\"https://git-scm.com/book/en/v2/images/snapshots.png\" alt=\"Git stores data as snapshots of the project over time.\"></p>\n<h3 id=\"git工作流程\"><a href=\"#git工作流程\" class=\"headerlink\" title=\"git工作流程\"></a>git工作流程</h3><p>​    git有三种状态，<strong>Committed</strong>（已提交），<strong>Modified</strong>（已修改）和<strong>Staged</strong>（已暂存）。已提交指的是文件已经老老实实地躺在你的数据库里面了；已修改是指已经变动但是并没有提交；已暂存的标示你已经<strong>标记</strong>这一次修改，但是标记的快照并没有合并到你的数据库里面。三种状态分别对应git的三个工作区域：<strong>the Git directory</strong>（本地仓库）, <strong>the working tree</strong>（工作目录）, <strong>and the staging area</strong>（暂存区域）。</p>\n<p><img src=\"http://images0.cnblogs.com/blog2015/512650/201508/181930031754207.png\" alt=\"点击查看源网页\"></p>\n<p>所以，当我们使用git 的时候，我们的工作流程是这样的：</p>\n<ol>\n<li>修改工作目录中的文件；</li>\n<li>标记快照暂存；</li>\n<li>提交到库。</li>\n</ol>\n<h3 id=\"参考文件\"><a href=\"#参考文件\" class=\"headerlink\" title=\"参考文件\"></a>参考文件</h3><p><a href=\"http://ericsink.com/vcbe/html/history_of_version_control.html\" target=\"_blank\" rel=\"external\">http://ericsink.com/vcbe/html/history_of_version_control.html</a></p>\n<p><a href=\"https://git-scm.com/book/en/v2/Getting-Started-Git-Basics\" target=\"_blank\" rel=\"external\">https://git-scm.com/book/en/v2/Getting-Started-Git-Basics</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><p>​    提到git就不得不说版本控制，与git相关的系统都是版本控制系统，他们用于记录文件的更改以便随时可以返回需要的特定版本。它的发展历史，概括的说就是从可操作文件一个到多个，从单人工作到多人协同，从集中式到分布式。</p>\n<h3 id=\"git工作原理\"><a href=\"#git工作原理\" class=\"headerlink\" title=\"git工作原理\"></a>git工作原理</h3><p>​    git是一个DRCS（distributed revision control system），它来自偶然，产于赌气。git 的工作原理也是它与其他版本控制软件的本质区别，每一次提交都相当于一个<strong>快照</strong>，改动的文件做记录，未改动的文件做链接。如下图，每一个纵向的<strong>version</strong>就是一个快照。</p>\n<p><img src=\"https://git-scm.com/book/en/v2/images/snapshots.png\" alt=\"Git stores data as snapshots of the project over time.\"></p>\n<h3 id=\"git工作流程\"><a href=\"#git工作流程\" class=\"headerlink\" title=\"git工作流程\"></a>git工作流程</h3><p>​    git有三种状态，<strong>Committed</strong>（已提交），<strong>Modified</strong>（已修改）和<strong>Staged</strong>（已暂存）。已提交指的是文件已经老老实实地躺在你的数据库里面了；已修改是指已经变动但是并没有提交；已暂存的标示你已经<strong>标记</strong>这一次修改，但是标记的快照并没有合并到你的数据库里面。三种状态分别对应git的三个工作区域：<strong>the Git directory</strong>（本地仓库）, <strong>the working tree</strong>（工作目录）, <strong>and the staging area</strong>（暂存区域）。</p>\n<p><img src=\"http://images0.cnblogs.com/blog2015/512650/201508/181930031754207.png\" alt=\"点击查看源网页\"></p>\n<p>所以，当我们使用git 的时候，我们的工作流程是这样的：</p>\n<ol>\n<li>修改工作目录中的文件；</li>\n<li>标记快照暂存；</li>\n<li>提交到库。</li>\n</ol>\n<h3 id=\"参考文件\"><a href=\"#参考文件\" class=\"headerlink\" title=\"参考文件\"></a>参考文件</h3><p><a href=\"http://ericsink.com/vcbe/html/history_of_version_control.html\">http://ericsink.com/vcbe/html/history_of_version_control.html</a></p>\n<p><a href=\"https://git-scm.com/book/en/v2/Getting-Started-Git-Basics\">https://git-scm.com/book/en/v2/Getting-Started-Git-Basics</a></p>\n"},{"title":"如何在网络公共场合发帖提问","_content":"\n本文[《How To Ask Questions The Smart Way》](http://www.catb.org/esr/faqs/smart-questions.html)的学习笔记，仅供参考。\n\n概括的说就是在提问之前先**自己尝试解决问题**，未能解决，再提问。\n\n提问的根本原则是：让别人**指点你**，而不是让别人直接**给你**。\n\n## 先做好自己的功课\n\n提问之前你要先做好下面的事情。\n\n1.  用google搜索。至于为什么要用google和[如何用google](https://b.xinshengdaxue.com/C04.html)，大家先去google一下吧。\n2.  阅读软件的使用手册。\n3.  阅读相关软件的FAQ。\n4.  在论坛中搜索。\n5.  自己检查和试验。\n\n## 提问的时候\n\n请先表明你已经上一部分所说的那里尝试和努力，\n\n如果你的问题是`可以不可以给点提示？`、`我的这个例子里面缺了什么？`或者`我应该检查什么地方？` ，那恭喜你已经入门了，如果你一般都是直接问`请把我需要的确切过程发给我`，那你可能需要更加认真的往下看。\n\n### 在合适的地方提出合适的问题\n\n例如，不要母婴论坛问编程的问题（相信没有人会这样做），不要在全是高手的地方问初级问题，不要重复贴出同样的问题，不要向跟你不熟也没有义务帮助你的人发送私人邮件。\n\n#### 关于网络论坛\n\n搞清楚那个论坛是干什么的，搞清楚论坛里面每个版块是干什么的。\n\n### 写好标题\n\n好标题=对象+偏差\n\n**对象**是出问题的那个东西\n\n**偏差**是指与你期望不一致的地方\n\n例如：\n\n> 愚蠢的描述：救命啊！我的电脑不能播放视频啦！\n>\n> 聪明的描述；X.org 6.8.1的鼠标光标变形，某品牌显卡 MV1005 晶片組。\n>\n> 更聪明的描述：X.org 6.8.1的鼠标光，在某品牌显卡 MV1005 晶片組环境下变形\n\n最后一个例子`变形`就是偏差，前面的就是对象。\n\n### 描述问题\n\n#### 简洁有效\n\n-   按时间顺序仔細、清楚地描述你的问题或bug的**症狀**，不要说你自己的**猜测**。\n-   描述问题发生的环境（电脑配置、操作系统、软件、以及相关信息），提供经销商的发行版和版本号。\n-   描述在提问前你是怎样去研究和理解這这问题的。\n-   描述在提问前为确定问题而采取的诊断步骤。\n-   描述最近做过什么可能相关的硬件或软件变更。\n-   如果可能的提供一个可以`再现这个问题的既定环境`的方法\n\n如果是关于代码的问题，注意不要把你上百行的代码全部贴出来，只要贴出出现问题的那个部分就可以了。比如`在第七行以后，我希望他得出<x>，但实际的结果却是<y>。 `\n\n例子：\n\n> **愚蠢的描述：**我在编译内核时接连遇到SIG11错误，怀疑主板上的某根电路丝断了，找到它们的最好办法是什么？\n>\n> **聪明的描述** ：我组装的电脑（K6/233 CPU、FIC-PA2007 主板威盛 Apollo VP2 芯片组、Corsair PC133 SDRAM 256Mb 内存）最近在开机20分钟左右、做内核编译时频繁地报错，提示SIG11 ，但在头20分钟内从不出问题。重启动不会复位时钟，但会整夜关机。更换所有内存未解决问题，相关的典型编译会话日志附后。\n\n#### 说出**目的**，而不是你操作过程中的某一个步骤\n\n**在开头就直接说你的目的是什么 ，然后再陈述你的问题。**\n\n**经常遇到这样的情况：寻求帮助的人有更进一步的目的，只是在前进的过程中遇到了阻碍，他们提出的问题只针对当下的步骤。其实很有可能不是现在的这一步出了问题，而是你的路径根本就错了。**\n\n> **愚蠢的问题**：我怎样才能让某图形程序的颜色拾取器取得十六进制的RGB值？\n>\n> **聪明的问题** ：我正试着用自己选定数值的颜色替换一幅图片的色表，我现在知道的唯一方法是编辑每个表槽，但却无法让某图形程序的颜色拾取器取得十六进制的RGB值。\n\n### 语句要清晰、正确、精炼且表达通顺\n\n写东西粗心的人，思考和编程也好不到哪去。\n\n花一点时间组织语言，使问题能够正确、清晰地表达出来。\n\n如果你用英语提问，那你要注意拼写、标点和大小写，不要用“u”代替“you”这种简化。\n\n如果你的英语水平不是特别好，在提问的时候可以加上这些。\n\n> -   English is not my native language; please excuse typing errors.\n> -   If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question.\n> -   I am familiar with the technical terms, but some slang expressions and idioms are difficult for me.\n> -   I've posted my question in $LANGUAGE and English. I'll be glad to translate responses, if you only use one or the other.\n\n不要用无意义的话结束提问，比如`你能帮助我吗`或者`这有答案吗？` 。一般来说，避免用`是或否` 、`对或错`、 `有或没有`类型的问句。**另外**，无论你多着急，也不要在标题里面写“急求”“紧急”等词语。\n\n### 解决问题后记得回复\n\n问题解决之后向所有人发声明说明问题已经解决并感谢所有人。\n\n方式是在标题里面加上`已修正`、`已解决`，这样做不但可以让可提供帮助的人不再浪费时间浏览你的问题，也可令有相同问题的人也会更加容易找到你。\n\n之后写一个**简单**的总结，一个`你好，原来时网络线出了问题，谢谢大家！`就比什么都不说要好。也可以说一下问题是怎么解决的。\n\n列出那些帮助过你的名字。\n\n## 对于别人的回复\n\n如果看不懂别人的回答，先不要急着回复提问，再执行一次`提问之前`的步骤。\n\n#### 如果还是不明白...\n\n回复的时候要加上自己已经学到了什么。\n","source":"_posts/如何在网络公共场合发帖提问.md","raw":"---\ntitle: 如何在网络公共场合发帖提问\n---\n\n本文[《How To Ask Questions The Smart Way》](http://www.catb.org/esr/faqs/smart-questions.html)的学习笔记，仅供参考。\n\n概括的说就是在提问之前先**自己尝试解决问题**，未能解决，再提问。\n\n提问的根本原则是：让别人**指点你**，而不是让别人直接**给你**。\n\n## 先做好自己的功课\n\n提问之前你要先做好下面的事情。\n\n1.  用google搜索。至于为什么要用google和[如何用google](https://b.xinshengdaxue.com/C04.html)，大家先去google一下吧。\n2.  阅读软件的使用手册。\n3.  阅读相关软件的FAQ。\n4.  在论坛中搜索。\n5.  自己检查和试验。\n\n## 提问的时候\n\n请先表明你已经上一部分所说的那里尝试和努力，\n\n如果你的问题是`可以不可以给点提示？`、`我的这个例子里面缺了什么？`或者`我应该检查什么地方？` ，那恭喜你已经入门了，如果你一般都是直接问`请把我需要的确切过程发给我`，那你可能需要更加认真的往下看。\n\n### 在合适的地方提出合适的问题\n\n例如，不要母婴论坛问编程的问题（相信没有人会这样做），不要在全是高手的地方问初级问题，不要重复贴出同样的问题，不要向跟你不熟也没有义务帮助你的人发送私人邮件。\n\n#### 关于网络论坛\n\n搞清楚那个论坛是干什么的，搞清楚论坛里面每个版块是干什么的。\n\n### 写好标题\n\n好标题=对象+偏差\n\n**对象**是出问题的那个东西\n\n**偏差**是指与你期望不一致的地方\n\n例如：\n\n> 愚蠢的描述：救命啊！我的电脑不能播放视频啦！\n>\n> 聪明的描述；X.org 6.8.1的鼠标光标变形，某品牌显卡 MV1005 晶片組。\n>\n> 更聪明的描述：X.org 6.8.1的鼠标光，在某品牌显卡 MV1005 晶片組环境下变形\n\n最后一个例子`变形`就是偏差，前面的就是对象。\n\n### 描述问题\n\n#### 简洁有效\n\n-   按时间顺序仔細、清楚地描述你的问题或bug的**症狀**，不要说你自己的**猜测**。\n-   描述问题发生的环境（电脑配置、操作系统、软件、以及相关信息），提供经销商的发行版和版本号。\n-   描述在提问前你是怎样去研究和理解這这问题的。\n-   描述在提问前为确定问题而采取的诊断步骤。\n-   描述最近做过什么可能相关的硬件或软件变更。\n-   如果可能的提供一个可以`再现这个问题的既定环境`的方法\n\n如果是关于代码的问题，注意不要把你上百行的代码全部贴出来，只要贴出出现问题的那个部分就可以了。比如`在第七行以后，我希望他得出<x>，但实际的结果却是<y>。 `\n\n例子：\n\n> **愚蠢的描述：**我在编译内核时接连遇到SIG11错误，怀疑主板上的某根电路丝断了，找到它们的最好办法是什么？\n>\n> **聪明的描述** ：我组装的电脑（K6/233 CPU、FIC-PA2007 主板威盛 Apollo VP2 芯片组、Corsair PC133 SDRAM 256Mb 内存）最近在开机20分钟左右、做内核编译时频繁地报错，提示SIG11 ，但在头20分钟内从不出问题。重启动不会复位时钟，但会整夜关机。更换所有内存未解决问题，相关的典型编译会话日志附后。\n\n#### 说出**目的**，而不是你操作过程中的某一个步骤\n\n**在开头就直接说你的目的是什么 ，然后再陈述你的问题。**\n\n**经常遇到这样的情况：寻求帮助的人有更进一步的目的，只是在前进的过程中遇到了阻碍，他们提出的问题只针对当下的步骤。其实很有可能不是现在的这一步出了问题，而是你的路径根本就错了。**\n\n> **愚蠢的问题**：我怎样才能让某图形程序的颜色拾取器取得十六进制的RGB值？\n>\n> **聪明的问题** ：我正试着用自己选定数值的颜色替换一幅图片的色表，我现在知道的唯一方法是编辑每个表槽，但却无法让某图形程序的颜色拾取器取得十六进制的RGB值。\n\n### 语句要清晰、正确、精炼且表达通顺\n\n写东西粗心的人，思考和编程也好不到哪去。\n\n花一点时间组织语言，使问题能够正确、清晰地表达出来。\n\n如果你用英语提问，那你要注意拼写、标点和大小写，不要用“u”代替“you”这种简化。\n\n如果你的英语水平不是特别好，在提问的时候可以加上这些。\n\n> -   English is not my native language; please excuse typing errors.\n> -   If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question.\n> -   I am familiar with the technical terms, but some slang expressions and idioms are difficult for me.\n> -   I've posted my question in $LANGUAGE and English. I'll be glad to translate responses, if you only use one or the other.\n\n不要用无意义的话结束提问，比如`你能帮助我吗`或者`这有答案吗？` 。一般来说，避免用`是或否` 、`对或错`、 `有或没有`类型的问句。**另外**，无论你多着急，也不要在标题里面写“急求”“紧急”等词语。\n\n### 解决问题后记得回复\n\n问题解决之后向所有人发声明说明问题已经解决并感谢所有人。\n\n方式是在标题里面加上`已修正`、`已解决`，这样做不但可以让可提供帮助的人不再浪费时间浏览你的问题，也可令有相同问题的人也会更加容易找到你。\n\n之后写一个**简单**的总结，一个`你好，原来时网络线出了问题，谢谢大家！`就比什么都不说要好。也可以说一下问题是怎么解决的。\n\n列出那些帮助过你的名字。\n\n## 对于别人的回复\n\n如果看不懂别人的回答，先不要急着回复提问，再执行一次`提问之前`的步骤。\n\n#### 如果还是不明白...\n\n回复的时候要加上自己已经学到了什么。\n","slug":"如何在网络公共场合发帖提问","published":1,"date":"2017-02-27T04:44:12.000Z","updated":"2017-02-27T04:44:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1opcc5z000567bo2suqitx3","content":"<p>本文<a href=\"http://www.catb.org/esr/faqs/smart-questions.html\" target=\"_blank\" rel=\"external\">《How To Ask Questions The Smart Way》</a>的学习笔记，仅供参考。</p>\n<p>概括的说就是在提问之前先<strong>自己尝试解决问题</strong>，未能解决，再提问。</p>\n<p>提问的根本原则是：让别人<strong>指点你</strong>，而不是让别人直接<strong>给你</strong>。</p>\n<h2 id=\"先做好自己的功课\"><a href=\"#先做好自己的功课\" class=\"headerlink\" title=\"先做好自己的功课\"></a>先做好自己的功课</h2><p>提问之前你要先做好下面的事情。</p>\n<ol>\n<li>用google搜索。至于为什么要用google和<a href=\"https://b.xinshengdaxue.com/C04.html\" target=\"_blank\" rel=\"external\">如何用google</a>，大家先去google一下吧。</li>\n<li>阅读软件的使用手册。</li>\n<li>阅读相关软件的FAQ。</li>\n<li>在论坛中搜索。</li>\n<li>自己检查和试验。</li>\n</ol>\n<h2 id=\"提问的时候\"><a href=\"#提问的时候\" class=\"headerlink\" title=\"提问的时候\"></a>提问的时候</h2><p>请先表明你已经上一部分所说的那里尝试和努力，</p>\n<p>如果你的问题是<code>可以不可以给点提示？</code>、<code>我的这个例子里面缺了什么？</code>或者<code>我应该检查什么地方？</code> ，那恭喜你已经入门了，如果你一般都是直接问<code>请把我需要的确切过程发给我</code>，那你可能需要更加认真的往下看。</p>\n<h3 id=\"在合适的地方提出合适的问题\"><a href=\"#在合适的地方提出合适的问题\" class=\"headerlink\" title=\"在合适的地方提出合适的问题\"></a>在合适的地方提出合适的问题</h3><p>例如，不要母婴论坛问编程的问题（相信没有人会这样做），不要在全是高手的地方问初级问题，不要重复贴出同样的问题，不要向跟你不熟也没有义务帮助你的人发送私人邮件。</p>\n<h4 id=\"关于网络论坛\"><a href=\"#关于网络论坛\" class=\"headerlink\" title=\"关于网络论坛\"></a>关于网络论坛</h4><p>搞清楚那个论坛是干什么的，搞清楚论坛里面每个版块是干什么的。</p>\n<h3 id=\"写好标题\"><a href=\"#写好标题\" class=\"headerlink\" title=\"写好标题\"></a>写好标题</h3><p>好标题=对象+偏差</p>\n<p><strong>对象</strong>是出问题的那个东西</p>\n<p><strong>偏差</strong>是指与你期望不一致的地方</p>\n<p>例如：</p>\n<blockquote>\n<p>愚蠢的描述：救命啊！我的电脑不能播放视频啦！</p>\n<p>聪明的描述；X.org 6.8.1的鼠标光标变形，某品牌显卡 MV1005 晶片組。</p>\n<p>更聪明的描述：X.org 6.8.1的鼠标光，在某品牌显卡 MV1005 晶片組环境下变形</p>\n</blockquote>\n<p>最后一个例子<code>变形</code>就是偏差，前面的就是对象。</p>\n<h3 id=\"描述问题\"><a href=\"#描述问题\" class=\"headerlink\" title=\"描述问题\"></a>描述问题</h3><h4 id=\"简洁有效\"><a href=\"#简洁有效\" class=\"headerlink\" title=\"简洁有效\"></a>简洁有效</h4><ul>\n<li>按时间顺序仔細、清楚地描述你的问题或bug的<strong>症狀</strong>，不要说你自己的<strong>猜测</strong>。</li>\n<li>描述问题发生的环境（电脑配置、操作系统、软件、以及相关信息），提供经销商的发行版和版本号。</li>\n<li>描述在提问前你是怎样去研究和理解這这问题的。</li>\n<li>描述在提问前为确定问题而采取的诊断步骤。</li>\n<li>描述最近做过什么可能相关的硬件或软件变更。</li>\n<li>如果可能的提供一个可以<code>再现这个问题的既定环境</code>的方法</li>\n</ul>\n<p>如果是关于代码的问题，注意不要把你上百行的代码全部贴出来，只要贴出出现问题的那个部分就可以了。比如<code>在第七行以后，我希望他得出&lt;x&gt;，但实际的结果却是&lt;y&gt;。</code></p>\n<p>例子：</p>\n<blockquote>\n<p><strong>愚蠢的描述：</strong>我在编译内核时接连遇到SIG11错误，怀疑主板上的某根电路丝断了，找到它们的最好办法是什么？</p>\n<p><strong>聪明的描述</strong> ：我组装的电脑（K6/233 CPU、FIC-PA2007 主板威盛 Apollo VP2 芯片组、Corsair PC133 SDRAM 256Mb 内存）最近在开机20分钟左右、做内核编译时频繁地报错，提示SIG11 ，但在头20分钟内从不出问题。重启动不会复位时钟，但会整夜关机。更换所有内存未解决问题，相关的典型编译会话日志附后。</p>\n</blockquote>\n<h4 id=\"说出目的，而不是你操作过程中的某一个步骤\"><a href=\"#说出目的，而不是你操作过程中的某一个步骤\" class=\"headerlink\" title=\"说出目的，而不是你操作过程中的某一个步骤\"></a>说出<strong>目的</strong>，而不是你操作过程中的某一个步骤</h4><p><strong>在开头就直接说你的目的是什么 ，然后再陈述你的问题。</strong></p>\n<p><strong>经常遇到这样的情况：寻求帮助的人有更进一步的目的，只是在前进的过程中遇到了阻碍，他们提出的问题只针对当下的步骤。其实很有可能不是现在的这一步出了问题，而是你的路径根本就错了。</strong></p>\n<blockquote>\n<p><strong>愚蠢的问题</strong>：我怎样才能让某图形程序的颜色拾取器取得十六进制的RGB值？</p>\n<p><strong>聪明的问题</strong> ：我正试着用自己选定数值的颜色替换一幅图片的色表，我现在知道的唯一方法是编辑每个表槽，但却无法让某图形程序的颜色拾取器取得十六进制的RGB值。</p>\n</blockquote>\n<h3 id=\"语句要清晰、正确、精炼且表达通顺\"><a href=\"#语句要清晰、正确、精炼且表达通顺\" class=\"headerlink\" title=\"语句要清晰、正确、精炼且表达通顺\"></a>语句要清晰、正确、精炼且表达通顺</h3><p>写东西粗心的人，思考和编程也好不到哪去。</p>\n<p>花一点时间组织语言，使问题能够正确、清晰地表达出来。</p>\n<p>如果你用英语提问，那你要注意拼写、标点和大小写，不要用“u”代替“you”这种简化。</p>\n<p>如果你的英语水平不是特别好，在提问的时候可以加上这些。</p>\n<blockquote>\n<ul>\n<li>English is not my native language; please excuse typing errors.</li>\n<li>If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question.</li>\n<li>I am familiar with the technical terms, but some slang expressions and idioms are difficult for me.</li>\n<li>I’ve posted my question in $LANGUAGE and English. I’ll be glad to translate responses, if you only use one or the other.</li>\n</ul>\n</blockquote>\n<p>不要用无意义的话结束提问，比如<code>你能帮助我吗</code>或者<code>这有答案吗？</code> 。一般来说，避免用<code>是或否</code> 、<code>对或错</code>、 <code>有或没有</code>类型的问句。<strong>另外</strong>，无论你多着急，也不要在标题里面写“急求”“紧急”等词语。</p>\n<h3 id=\"解决问题后记得回复\"><a href=\"#解决问题后记得回复\" class=\"headerlink\" title=\"解决问题后记得回复\"></a>解决问题后记得回复</h3><p>问题解决之后向所有人发声明说明问题已经解决并感谢所有人。</p>\n<p>方式是在标题里面加上<code>已修正</code>、<code>已解决</code>，这样做不但可以让可提供帮助的人不再浪费时间浏览你的问题，也可令有相同问题的人也会更加容易找到你。</p>\n<p>之后写一个<strong>简单</strong>的总结，一个<code>你好，原来时网络线出了问题，谢谢大家！</code>就比什么都不说要好。也可以说一下问题是怎么解决的。</p>\n<p>列出那些帮助过你的名字。</p>\n<h2 id=\"对于别人的回复\"><a href=\"#对于别人的回复\" class=\"headerlink\" title=\"对于别人的回复\"></a>对于别人的回复</h2><p>如果看不懂别人的回答，先不要急着回复提问，再执行一次<code>提问之前</code>的步骤。</p>\n<h4 id=\"如果还是不明白…\"><a href=\"#如果还是不明白…\" class=\"headerlink\" title=\"如果还是不明白…\"></a>如果还是不明白…</h4><p>回复的时候要加上自己已经学到了什么。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文<a href=\"http://www.catb.org/esr/faqs/smart-questions.html\">《How To Ask Questions The Smart Way》</a>的学习笔记，仅供参考。</p>\n<p>概括的说就是在提问之前先<strong>自己尝试解决问题</strong>，未能解决，再提问。</p>\n<p>提问的根本原则是：让别人<strong>指点你</strong>，而不是让别人直接<strong>给你</strong>。</p>\n<h2 id=\"先做好自己的功课\"><a href=\"#先做好自己的功课\" class=\"headerlink\" title=\"先做好自己的功课\"></a>先做好自己的功课</h2><p>提问之前你要先做好下面的事情。</p>\n<ol>\n<li>用google搜索。至于为什么要用google和<a href=\"https://b.xinshengdaxue.com/C04.html\">如何用google</a>，大家先去google一下吧。</li>\n<li>阅读软件的使用手册。</li>\n<li>阅读相关软件的FAQ。</li>\n<li>在论坛中搜索。</li>\n<li>自己检查和试验。</li>\n</ol>\n<h2 id=\"提问的时候\"><a href=\"#提问的时候\" class=\"headerlink\" title=\"提问的时候\"></a>提问的时候</h2><p>请先表明你已经上一部分所说的那里尝试和努力，</p>\n<p>如果你的问题是<code>可以不可以给点提示？</code>、<code>我的这个例子里面缺了什么？</code>或者<code>我应该检查什么地方？</code> ，那恭喜你已经入门了，如果你一般都是直接问<code>请把我需要的确切过程发给我</code>，那你可能需要更加认真的往下看。</p>\n<h3 id=\"在合适的地方提出合适的问题\"><a href=\"#在合适的地方提出合适的问题\" class=\"headerlink\" title=\"在合适的地方提出合适的问题\"></a>在合适的地方提出合适的问题</h3><p>例如，不要母婴论坛问编程的问题（相信没有人会这样做），不要在全是高手的地方问初级问题，不要重复贴出同样的问题，不要向跟你不熟也没有义务帮助你的人发送私人邮件。</p>\n<h4 id=\"关于网络论坛\"><a href=\"#关于网络论坛\" class=\"headerlink\" title=\"关于网络论坛\"></a>关于网络论坛</h4><p>搞清楚那个论坛是干什么的，搞清楚论坛里面每个版块是干什么的。</p>\n<h3 id=\"写好标题\"><a href=\"#写好标题\" class=\"headerlink\" title=\"写好标题\"></a>写好标题</h3><p>好标题=对象+偏差</p>\n<p><strong>对象</strong>是出问题的那个东西</p>\n<p><strong>偏差</strong>是指与你期望不一致的地方</p>\n<p>例如：</p>\n<blockquote>\n<p>愚蠢的描述：救命啊！我的电脑不能播放视频啦！</p>\n<p>聪明的描述；X.org 6.8.1的鼠标光标变形，某品牌显卡 MV1005 晶片組。</p>\n<p>更聪明的描述：X.org 6.8.1的鼠标光，在某品牌显卡 MV1005 晶片組环境下变形</p>\n</blockquote>\n<p>最后一个例子<code>变形</code>就是偏差，前面的就是对象。</p>\n<h3 id=\"描述问题\"><a href=\"#描述问题\" class=\"headerlink\" title=\"描述问题\"></a>描述问题</h3><h4 id=\"简洁有效\"><a href=\"#简洁有效\" class=\"headerlink\" title=\"简洁有效\"></a>简洁有效</h4><ul>\n<li>按时间顺序仔細、清楚地描述你的问题或bug的<strong>症狀</strong>，不要说你自己的<strong>猜测</strong>。</li>\n<li>描述问题发生的环境（电脑配置、操作系统、软件、以及相关信息），提供经销商的发行版和版本号。</li>\n<li>描述在提问前你是怎样去研究和理解這这问题的。</li>\n<li>描述在提问前为确定问题而采取的诊断步骤。</li>\n<li>描述最近做过什么可能相关的硬件或软件变更。</li>\n<li>如果可能的提供一个可以<code>再现这个问题的既定环境</code>的方法</li>\n</ul>\n<p>如果是关于代码的问题，注意不要把你上百行的代码全部贴出来，只要贴出出现问题的那个部分就可以了。比如<code>在第七行以后，我希望他得出&lt;x&gt;，但实际的结果却是&lt;y&gt;。</code></p>\n<p>例子：</p>\n<blockquote>\n<p><strong>愚蠢的描述：</strong>我在编译内核时接连遇到SIG11错误，怀疑主板上的某根电路丝断了，找到它们的最好办法是什么？</p>\n<p><strong>聪明的描述</strong> ：我组装的电脑（K6/233 CPU、FIC-PA2007 主板威盛 Apollo VP2 芯片组、Corsair PC133 SDRAM 256Mb 内存）最近在开机20分钟左右、做内核编译时频繁地报错，提示SIG11 ，但在头20分钟内从不出问题。重启动不会复位时钟，但会整夜关机。更换所有内存未解决问题，相关的典型编译会话日志附后。</p>\n</blockquote>\n<h4 id=\"说出目的，而不是你操作过程中的某一个步骤\"><a href=\"#说出目的，而不是你操作过程中的某一个步骤\" class=\"headerlink\" title=\"说出目的，而不是你操作过程中的某一个步骤\"></a>说出<strong>目的</strong>，而不是你操作过程中的某一个步骤</h4><p><strong>在开头就直接说你的目的是什么 ，然后再陈述你的问题。</strong></p>\n<p><strong>经常遇到这样的情况：寻求帮助的人有更进一步的目的，只是在前进的过程中遇到了阻碍，他们提出的问题只针对当下的步骤。其实很有可能不是现在的这一步出了问题，而是你的路径根本就错了。</strong></p>\n<blockquote>\n<p><strong>愚蠢的问题</strong>：我怎样才能让某图形程序的颜色拾取器取得十六进制的RGB值？</p>\n<p><strong>聪明的问题</strong> ：我正试着用自己选定数值的颜色替换一幅图片的色表，我现在知道的唯一方法是编辑每个表槽，但却无法让某图形程序的颜色拾取器取得十六进制的RGB值。</p>\n</blockquote>\n<h3 id=\"语句要清晰、正确、精炼且表达通顺\"><a href=\"#语句要清晰、正确、精炼且表达通顺\" class=\"headerlink\" title=\"语句要清晰、正确、精炼且表达通顺\"></a>语句要清晰、正确、精炼且表达通顺</h3><p>写东西粗心的人，思考和编程也好不到哪去。</p>\n<p>花一点时间组织语言，使问题能够正确、清晰地表达出来。</p>\n<p>如果你用英语提问，那你要注意拼写、标点和大小写，不要用“u”代替“you”这种简化。</p>\n<p>如果你的英语水平不是特别好，在提问的时候可以加上这些。</p>\n<blockquote>\n<ul>\n<li>English is not my native language; please excuse typing errors.</li>\n<li>If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question.</li>\n<li>I am familiar with the technical terms, but some slang expressions and idioms are difficult for me.</li>\n<li>I’ve posted my question in $LANGUAGE and English. I’ll be glad to translate responses, if you only use one or the other.</li>\n</ul>\n</blockquote>\n<p>不要用无意义的话结束提问，比如<code>你能帮助我吗</code>或者<code>这有答案吗？</code> 。一般来说，避免用<code>是或否</code> 、<code>对或错</code>、 <code>有或没有</code>类型的问句。<strong>另外</strong>，无论你多着急，也不要在标题里面写“急求”“紧急”等词语。</p>\n<h3 id=\"解决问题后记得回复\"><a href=\"#解决问题后记得回复\" class=\"headerlink\" title=\"解决问题后记得回复\"></a>解决问题后记得回复</h3><p>问题解决之后向所有人发声明说明问题已经解决并感谢所有人。</p>\n<p>方式是在标题里面加上<code>已修正</code>、<code>已解决</code>，这样做不但可以让可提供帮助的人不再浪费时间浏览你的问题，也可令有相同问题的人也会更加容易找到你。</p>\n<p>之后写一个<strong>简单</strong>的总结，一个<code>你好，原来时网络线出了问题，谢谢大家！</code>就比什么都不说要好。也可以说一下问题是怎么解决的。</p>\n<p>列出那些帮助过你的名字。</p>\n<h2 id=\"对于别人的回复\"><a href=\"#对于别人的回复\" class=\"headerlink\" title=\"对于别人的回复\"></a>对于别人的回复</h2><p>如果看不懂别人的回答，先不要急着回复提问，再执行一次<code>提问之前</code>的步骤。</p>\n<h4 id=\"如果还是不明白…\"><a href=\"#如果还是不明白…\" class=\"headerlink\" title=\"如果还是不明白…\"></a>如果还是不明白…</h4><p>回复的时候要加上自己已经学到了什么。</p>\n"},{"title":"对angularJS一些概念的理解","_content":"## angularJS是以MVC为设计模式的JS框架\n**MVC**(Model View Controller)**设计模式**（design pattern）也可以理解成运行方式。每一个使用angularJS的程序都有这三个部分：\n-   模型/Model，这个部分说成是自建数据库的话会更容易理解；\n-   视图/View，就是显示的部分；\n-   控制器/Controller，软件代码控制Model和View之间的相互作用。\n\n![](https://www.codeproject.com/KB/aspnet/344292/mvc.PNG)\n\n在学习html、css和JavaScript的过程中经常会看到framework、library这些词汇，笼统的讲，他们都是人们为了快速解决问题、避免简单重复的体力劳动而做的一些工具或加工到一定程度的原材料。\n\n就好像你喜欢用豆腐做菜，可你并不需要每次都从种黄豆开始，已经有人做好了豆腐在那里卖，你只要拿过来直接用就可以了。\n\n而framework和library的区别，我现在的理解是，framework是比library加工程度更深的原材料。如果framework是豆腐，那library就是做豆腐需要的原材料。你当然也可以使用做豆腐的原材料去做菜。\n\n![image](http://o7w6l6vti.bkt.clouddn.com/Difference%20between%20Library%20and%20Framework%20%28in%20JavaScript%29.png)\n\n不过豆腐的例子不能很好的说明的一点是好莱坞原则。开脑洞的说就是，豆腐可以自己使用你准备好的东西如调味料、锅和铲子等把自己做成做成美味的菜肴。\n","source":"_posts/对angularJS一些概念的理解.md","raw":"---\ntitle: 对angularJS一些概念的理解\n---\n## angularJS是以MVC为设计模式的JS框架\n**MVC**(Model View Controller)**设计模式**（design pattern）也可以理解成运行方式。每一个使用angularJS的程序都有这三个部分：\n-   模型/Model，这个部分说成是自建数据库的话会更容易理解；\n-   视图/View，就是显示的部分；\n-   控制器/Controller，软件代码控制Model和View之间的相互作用。\n\n![](https://www.codeproject.com/KB/aspnet/344292/mvc.PNG)\n\n在学习html、css和JavaScript的过程中经常会看到framework、library这些词汇，笼统的讲，他们都是人们为了快速解决问题、避免简单重复的体力劳动而做的一些工具或加工到一定程度的原材料。\n\n就好像你喜欢用豆腐做菜，可你并不需要每次都从种黄豆开始，已经有人做好了豆腐在那里卖，你只要拿过来直接用就可以了。\n\n而framework和library的区别，我现在的理解是，framework是比library加工程度更深的原材料。如果framework是豆腐，那library就是做豆腐需要的原材料。你当然也可以使用做豆腐的原材料去做菜。\n\n![image](http://o7w6l6vti.bkt.clouddn.com/Difference%20between%20Library%20and%20Framework%20%28in%20JavaScript%29.png)\n\n不过豆腐的例子不能很好的说明的一点是好莱坞原则。开脑洞的说就是，豆腐可以自己使用你准备好的东西如调味料、锅和铲子等把自己做成做成美味的菜肴。\n","slug":"对angularJS一些概念的理解","published":1,"date":"2017-02-22T12:31:04.000Z","updated":"2017-02-22T12:31:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1opcc62000667bokg9u9bjq","content":"<h2 id=\"angularJS是以MVC为设计模式的JS框架\"><a href=\"#angularJS是以MVC为设计模式的JS框架\" class=\"headerlink\" title=\"angularJS是以MVC为设计模式的JS框架\"></a>angularJS是以MVC为设计模式的JS框架</h2><p><strong>MVC</strong>(Model View Controller)<strong>设计模式</strong>（design pattern）也可以理解成运行方式。每一个使用angularJS的程序都有这三个部分：</p>\n<ul>\n<li>模型/Model，这个部分说成是自建数据库的话会更容易理解；</li>\n<li>视图/View，就是显示的部分；</li>\n<li>控制器/Controller，软件代码控制Model和View之间的相互作用。</li>\n</ul>\n<p><img src=\"https://www.codeproject.com/KB/aspnet/344292/mvc.PNG\" alt=\"\"></p>\n<p>在学习html、css和JavaScript的过程中经常会看到framework、library这些词汇，笼统的讲，他们都是人们为了快速解决问题、避免简单重复的体力劳动而做的一些工具或加工到一定程度的原材料。</p>\n<p>就好像你喜欢用豆腐做菜，可你并不需要每次都从种黄豆开始，已经有人做好了豆腐在那里卖，你只要拿过来直接用就可以了。</p>\n<p>而framework和library的区别，我现在的理解是，framework是比library加工程度更深的原材料。如果framework是豆腐，那library就是做豆腐需要的原材料。你当然也可以使用做豆腐的原材料去做菜。</p>\n<p><img src=\"http://o7w6l6vti.bkt.clouddn.com/Difference%20between%20Library%20and%20Framework%20%28in%20JavaScript%29.png\" alt=\"image\"></p>\n<p>不过豆腐的例子不能很好的说明的一点是好莱坞原则。开脑洞的说就是，豆腐可以自己使用你准备好的东西如调味料、锅和铲子等把自己做成做成美味的菜肴。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"angularJS是以MVC为设计模式的JS框架\"><a href=\"#angularJS是以MVC为设计模式的JS框架\" class=\"headerlink\" title=\"angularJS是以MVC为设计模式的JS框架\"></a>angularJS是以MVC为设计模式的JS框架</h2><p><strong>MVC</strong>(Model View Controller)<strong>设计模式</strong>（design pattern）也可以理解成运行方式。每一个使用angularJS的程序都有这三个部分：</p>\n<ul>\n<li>模型/Model，这个部分说成是自建数据库的话会更容易理解；</li>\n<li>视图/View，就是显示的部分；</li>\n<li>控制器/Controller，软件代码控制Model和View之间的相互作用。</li>\n</ul>\n<p><img src=\"https://www.codeproject.com/KB/aspnet/344292/mvc.PNG\" alt=\"\"></p>\n<p>在学习html、css和JavaScript的过程中经常会看到framework、library这些词汇，笼统的讲，他们都是人们为了快速解决问题、避免简单重复的体力劳动而做的一些工具或加工到一定程度的原材料。</p>\n<p>就好像你喜欢用豆腐做菜，可你并不需要每次都从种黄豆开始，已经有人做好了豆腐在那里卖，你只要拿过来直接用就可以了。</p>\n<p>而framework和library的区别，我现在的理解是，framework是比library加工程度更深的原材料。如果framework是豆腐，那library就是做豆腐需要的原材料。你当然也可以使用做豆腐的原材料去做菜。</p>\n<p><img src=\"http://o7w6l6vti.bkt.clouddn.com/Difference%20between%20Library%20and%20Framework%20%28in%20JavaScript%29.png\" alt=\"image\"></p>\n<p>不过豆腐的例子不能很好的说明的一点是好莱坞原则。开脑洞的说就是，豆腐可以自己使用你准备好的东西如调味料、锅和铲子等把自己做成做成美味的菜肴。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}